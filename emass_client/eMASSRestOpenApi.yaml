# eMass Rest Open API specification
---
openapi: 3.0.3
#-------------------------------------------------------------------------------
# I N F O  - API metadata
#-------------------------------------------------------------------------------
info:
  title: Enterprise Mission Assurance Support Service (eMASS)
  description: |
      The Enterprise Mission Assurance Support Service (eMASS) Representational State
      Transfer (REST) Application Programming Interface (API) enables users to perform
      assessments and complete actions associated with system records. This command-line
      interface (CLI) tool implements all of the eMASS endpoints defined in the eMASS 
      REST API v3.2, dated October 21, 2021.</br><br>

      <strong>Register CLI</strong></br>
      New users will need to register an API key with the eMASS development team prior to
      accessing the site for the first time. The eMASS REST API requires a client certificate
      (SSL/TLS, DoD PKI only) where {url}/api/register (POST) is used to register the client
      certificate.</br></br>

      Every call to the eMASS REST API will require the use of the agreed upon public key
      certificate and API key. The API key must be provided in the request header for all
      endpoint calls (api-key). If the service receives an untrusted certificate or API key, a
      401 error response code will be returned along with an error message.</br></br>
  
      <strong>Available Request Headers:</strong></br>
      <table>
        <tr>
          <th align=left>key</th>
          <th align=left>Example Value</th>
          <th align=left>Description</th>
        </tr>
        <tr>
          <td>`api-key`</td>
          <td>api-key-provided-by-emass</td>
          <td>This API key must be provided in the request header for all endpoint calls</td>
        </tr>
        <tr>
          <td>`user-uid`</td>
          <td>USER.UID.KEY</td>
          <td>This User unique identifier key must be provided in the request header for all PUT, POST, and DELETE endpoint calls</td>
        </tr>
        <tr>
          <td></td><td></td>
          <td>
            Note: For DoD users this is the DoD ID Number (EIDIPI) on their DoD CAC
          </td>
        </tr>
      </table>

      </br><strong>Approve API Client for Actionable Requests</strong></br>
      Users are required to log-in to eMASS and grant permissions for a client to update data
      within eMASS on their behalf. This is only required for actionable requests (PUT, POST,
      DELETE). The Registration Endpoint and all GET requests can be accessed without
      completing this process with the correct permissions. Please note that leaving a field
      parameter blank (for PUT/POST requests) has the potential to clear information in the
      active eMASS records.

      To establish an account with eMASS and/or acquire an api-key/user-uid, contact one of the listed POC:
  contact:
    name: eMASS Tier III support
    url: 'https://www.dcsa.mil/is/emass/'
    email: disa.meade.id.mbx.emass-tier-iii-support@mail.mil

  version: 'v3.2'

externalDocs:
  description: eMASS New User Registration (requires CAC authentication)
  url: 'https://nisp.emass.apps.mil/Content/Help/jobaids/eMASS_OT_NewUser_Job_Aid.pdf'
#-------------------------------------------------------------------------------
# S E R V E R S - Array of Server Objects which provide connectivity information
#                  to target servers.
#-------------------------------------------------------------------------------
servers:
  - url: "http://localhost:4010"
    description: Use localhost mock server
  - url: "https://localhost:4433"
    description: Use localhost secure mock server

#-------------------------------------------------------------------------------
# T A G S - A list of tags used by the specification with additional metadata.
#-------------------------------------------------------------------------------
tags:
  - name: Test
    description: >
      The Test Connection endpoint provides the ability to verify connection to the web service.
  - name: Registration
    description: >
      The Registration endpoint provides the ability to register a certificate & obtain an API-key.
  - name: Systems
    description: |
      The Systems endpoints provide the ability to view system information.

      **Notes**
        - If a system is dual-policy enabled, the returned system details default to the RMF policy information unless otherwise specified for an individual system.
        - Certain fields are instance specific and may not be returned in GET request.
  - name: System Roles
    description: |
      The System Roles endpoints provides the ability to access user data assigned to systems.

      **Notes:**
      - The endpoint can access three different role categories: PAC, CAC, and Other.
      - If a system is dual-policy enabled, the returned system role information will default to the RMF policy information unless otherwise specified.
  - name: Controls
    description: "The Controls endpoints provide the ability to view, add, and update
      Security Control information to a system for both the Implementation Plan and
      Risk Assessment."
  - name: Test Results
    description: >
      The Test Results endpoints provide the ability to view and add test results for a system's
      Assessment Procedures (CCIs) which determine Security Control compliance.
  - name: POAM
    description: >
      The POA&Ms endpoints provide the ability to view, add, update, and remove Plan of Action
      and Milestones (POA&M) items and associated milestones for a system.
  - name: Milestones
    description: >
      The Milestones endpoints provide the ability to view, add, update, and remove milestones
      that are associated with Plan of Action and Milestones (POA&M) items for a system.
  - name: Artifacts
    description: >
      The Artifacts endpoints provide the ability to view, add, update, and remove artifacts
      (supporting documentation/evidence) and associated files for a system.
  - name: Artifacts Export
    description: >
      The Artifacts Export endpoint provides the ability to download artifact files for a system.
  - name: CAC
    description: |
      The Control Approval Chain (CAC) endpoints provide the ability to view the status of
      Security Controls and submit them to the second stage in the Control Approval Chain.

      **Notes:**
      - POST requests will only yield successful results if the Security Control is at the
        first stage of the CAC. If the control is not at the first stage, an error will be returned.      
  - name: PAC
    description: |
      The Package Approval Chain (PAC) endpoints provide the ability to view the status of
      existing workflows and initiate new workflows for a system.
      
      **Notes:**
      - If the indicated system has any active workflows, the response will include information
        such as the workflow type and the current stage of each workflow.
      - If there are no active workflows, then a null data member will be returned.
  - name: CMMC Assessments
    description: >
      The Cybersecurity Maturity Model Certification (CMMC) Assessments endpoint provides the
      ability to view CMMC assessment information. It is available to CMMC eMASS only.
  - name: Static Code Scans
    description: >
      The Static Code Scans endpoint provides the ability to upload application scan findings
      into a system's assets module. Application findings can also be cleared from the system.
  - name: Workflow Definitions
    description: >
      The Workflow Definitions endpoint provides the ability to view all workflow schemas 
      available on the eMASS instance. Every transition for each workflow stage is included.
  - name: Workflow Instances
    description: >
      The Workflow Instances endpoint provides the ability to view detailed information on
      all active and historical workflows for a system.

#-------------------------------------------------------------------------------
# P A T H S - The available paths and operations for the API endpoints
#-------------------------------------------------------------------------------
paths:
  #----------------------------------------------------------------------------
  # Test endpoint
  #----------------------------------------------------------------------------
  /api:
    get:
      tags:
        - Test
      summary: "Test connection to the API"
      description: "Returns endpoint call status"
      operationId: testConnection
      responses:
        '200':
          description: "Successful response"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Test"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/400"          
        '403':
          description: "Forbidden"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/403"                
        '405':
          description: "Method Not Allowed"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/405"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/500"

  #----------------------------------------------------------------------------
  # Register endpoint
  #----------------------------------------------------------------------------
  /api/api-key:
    post:
      tags:
        - Registration
      summary: "Register user certificate and obtain an API key"
      description: "Returns the api-key - This API key must be provided in the request header for all endpoint calls (api-key)."
      operationId: registerUser
      requestBody:
        description: "User certificate previously provided by eMASS."
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RegisterUserRequestPostBody"
        required: true
      responses:
        '200':
          description: "Request has succeeded"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Register"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/400"          
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/401"
        '403':
          description: "Forbidden"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/403"                
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/404"
        '405':
          description: "Method Not Allowed"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/405"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/500"

  #----------------------------------------------------------------------------
  # Systems endpoint
  #----------------------------------------------------------------------------
  /api/systems:
    get:
      tags:
        - Systems
      summary: "Get system information"
      description: "Returns all system(s) that match the query parameters"
      operationId: getSystems
      parameters:
        - $ref: '#/components/parameters/includePackage'
        - $ref: '#/components/parameters/registrationType'
        - $ref: '#/components/parameters/ditprId'
        - $ref: '#/components/parameters/coamsId'
        - $ref: '#/components/parameters/policy'
        - $ref: '#/components/parameters/includeDitprMetrics'
        - $ref: '#/components/parameters/includeDecommissioned'
        - $ref: '#/components/parameters/reportsForScorecard'
      responses:
        '200':
          description: "Successful response"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SystemResponse"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/400"          
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/401"
        '403':
          description: "Forbidden"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/403"                
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/404"
        '405':
          description: "Method Not Allowed"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/405"
        '490':
          description: "API Rule Failed"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/490"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/500"

  /api/systems/{systemId}: 
    get:
      tags:
        - Systems
      summary: "Get system information for a specific system"
      description: "Returns the system matching provided parameters"
      operationId: getSystem
      parameters:
        - $ref: '#/components/parameters/systemId'
        - $ref: '#/components/parameters/includePackage'
        - $ref: '#/components/parameters/policy'
      responses:
        '200':
          description: "Successful response"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SystemResponse"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/400"          
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/401"
        '403':
          description: "Forbidden"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/403"                
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/404"
        '405':
          description: "Method Not Allowed"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/405"
        '490':
          description: "API Rule Failed"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/490"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/500"

  #----------------------------------------------------------------------------
  # System Roles endpoint
  #----------------------------------------------------------------------------
  /api/system-roles:
    get:
      tags:
        - System Roles
      summary: "Get available roles"
      description: "Returns all available roles"
      operationId: getSystemRoles
      responses:
        '200':
          description: "Successful response"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SystemRolesResponse"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/400"          
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/401"
        '403':
          description: "Forbidden"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/403"                
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/404"
        '405':
          description: "Method Not Allowed"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/405"
        '490':
          description: "API Rule Failed"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/490"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/500"

  /api/system-roles/{roleCategory}:
    get:
      tags:
        - System Roles
      summary: "Get system roles"
      description: "Returns the role(s) data matching parameters."
      operationId: getSystemRolesByCategoryId
      parameters:
        - $ref: '#/components/parameters/roleCategory'
        - $ref: '#/components/parameters/role'
        - $ref: '#/components/parameters/policy'
        - $ref: '#/components/parameters/includeDecommissioned'
      responses:
        '200':
          description: "Successful response"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SystemRolesCategoryResponse"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/400"          
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/401"
        '403':
          description: "Forbidden"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/403"                
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/404"
        '405':
          description: "Method Not Allowed"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/405"
        '490':
          description: "API Rule Failed"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/490"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/500"

  #----------------------------------------------------------------------------
  # Control endpoint
  #----------------------------------------------------------------------------
  /api/systems/{systemId}/controls:
    get:
      tags:
       - Controls
      summary: "Get control information in a system for one or many controls"
      description: |-
          Returns system control information for matching `systemId` path parameter
      operationId: getSystemControls
      parameters:
        - $ref: '#/components/parameters/systemId'
        - $ref: '#/components/parameters/acronyms'
      responses:
        '200':
          description: "Successful response"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ControlsResponseGet"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/400"          
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/401"
        '403':
          description: "Forbidden"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/403"                
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/404"
        '405':
          description: "Method Not Allowed"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/405"
        '490':
          description: "API Rule Failed"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/490"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/500"

    put:
      tags:
        - Controls
      summary: "Update control information in a system for one or many controls"
      description: |-

        Update a Control for given `systemId`<br>

        **Request Body Required Fields**
        - `acronym`
        - `responsibleEntities`
        - `controlDesignation`
        - `estimatedCompletionDate`
        - `implementationNarrative`

        The following optional fields are required based on the Implementation Status `implementationStatus` value<br>
        | Value                    | Required Fields
        |--------------------------|---------------------------------------------------
        | Planned  or Implemented  | `estimatedCompletionDate`, `responsibleEntities`, `slcmCriticality`, `slcmFrequency`, `slcmMethod`, `slcmReporting`, `slcmTracking`, `slcmComments`
        | Not Applicable           | `naJustification`, `responsibleEntities`
        | Manually Inherited       | `commonControlProvider`, `estimatedCompletionDate`, `responsibleEntities`, `slcmCriticality`, `slcmFrequency`, `slcmMethod`, `slcmReporting`, `slcmTracking`, `slcmComments`
        
        If the Implementation Status `implementationStatus` value is "Inherited", only the following fields can be updated:
          - `controlDesignation`
          - `commonnControlProvider`
      operationId: updateControlBySystemId
      parameters:
        - $ref: '#/components/parameters/systemId'
      requestBody:
        description: "Update an existing control by Id"
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ControlsRequestPutBody"
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ControlsResponsePut"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/400"          
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/401"
        '403':
          description: "Forbidden"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/403"                
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/404"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/500"

  #----------------------------------------------------------------------------
  # Test Results endpoint
  #----------------------------------------------------------------------------
  /api/systems/{systemId}/test-results:
    get:
      tags:
        - Test Results
      summary: "Get one or many test results in a system"
      description: |-
          Returns system test results information for matching parameters.<br>
      operationId: getSystemTestResults
      parameters:
        - $ref: '#/components/parameters/systemId'
        - $ref: '#/components/parameters/controlAcronyms'
        - $ref: '#/components/parameters/ccis'
        - $ref: '#/components/parameters/latestOnly'
      responses:
        '200':
          description: "Successful Response"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TestResultsResponseGet"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/400"          
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/401"
        '403':
          description: "Forbidden"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/403"                
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/404"
        '405':
          description: "Method Not Allowed"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/405"
        '490':
          description: "API Rule Failed"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/490"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/500"

    post:
      tags:
        - Test Results
      summary: "Add one or many test results in a system"
      description: |-
        Adds test results for given `systemId`

        **Request Body Required Fields**
        - `cci`
        - `testedBy`
        - `testDate`
        - `description`
        - `complianceStatus`
     
      operationId: addTestResultsBySystemId
      parameters:
        - $ref: '#/components/parameters/systemId'
      requestBody:
        description: "Update an existing control by Id"
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/TestResultsRequestPostBody"
        required: true
      responses:
        '200':
          description: "Successful response"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TestResultsResponsePost"
        '201':
          description: "Created"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/201"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/400"          
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/401"
        '403':
          description: "Forbidden"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/403"                
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/404"
        '405':
          description: "Method Not Allowed"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/405"
        '411':
          description: "Length Required"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/411"        
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/500"

  #----------------------------------------------------------------------------
  # POA&Ms endpoint
  #----------------------------------------------------------------------------
  /api/systems/{systemId}/poams:
    get:
      tags:
        - POAM
      summary: "Get one or many POA&M items in a system"
      description: "Returns system(s) containing POA&M items for matching parameters."
      operationId: getSystemPoams
      parameters:
        - $ref: '#/components/parameters/systemId'
        - $ref: '#/components/parameters/scheduledCompletionDateStart'
        - $ref: '#/components/parameters/scheduledCompletionDateEnd'
        - $ref: '#/components/parameters/controlAcronyms'
        - $ref: '#/components/parameters/ccis'
        - $ref: '#/components/parameters/systemOnly'
      responses:
        '200':
          description: "Successful response"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PoamResponseGet"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/400"          
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/401"
        '403':
          description: "Forbidden"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/403"                
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/404"
        '405':
          description: "Method Not Allowed"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/405"
        '490':
          description: "API Rule Failed"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/490"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/500"

    post:
      tags:
        - POAM
      summary: "Add one or many POA&M items in a system"
      description: |-
        Add a POA&M for given `systemId`<br>

        **Request Body Required Fields**
        - `status`
        - `vulnerabilityDescription`
        - `sourceIdentVuln`
        - `pocOrganization`
        - `resources`

        **Note**<br />
        If a POC email is supplied, the application will attempt to locate a user already
        registered within the application and pre-populate any information not explicitly supplied
        in the request. If no such user is found, these fields are **required** within the request.<br>
        `pocFirstName`, `pocLastName`, `pocPhoneNumber`<br />
      operationId: addPoamBySystemId
      parameters:
        - $ref: '#/components/parameters/systemId'
      requestBody:
        description: "Update an existing control by Id"
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PoamRequestPostBody"
        required: true
      responses:
        '200':
          description: "Successful response"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PoamResponsePost"
        '201':
          description: "Created"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/201"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/400"          
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/401"
        '403':
          description: "Forbidden"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/403"                
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/404"
        '405':
          description: "Method Not Allowed"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/405"
        '411':
          description: "Length Required"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/411"        
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/500"

    put:
      tags:
        - POAM
      summary: "Update one or many POA&M items in a system"
      description: |-
        Update a POA&M for given `systemId`<br>

        **Request Body Required Fields**
        - `poamId`
        - `displayPoamId`
        - `status`
        - `vulnerabilityDescription`
        - `sourceIdentVuln`
        - `pocOrganization`
        - `reviewStatus`

        **Notes**
        - If a POC email is supplied, the application will attempt to locate a user already
          registered within the application and pre-populate any information not explicitly supplied
          in the request. If no such user is found, these fields are **required** within the request.<br>
          `pocOrganization`, `pocFirstName`, `pocLastName`, `pocEmail`, `pocPhoneNumber`<br />

        - To delete a milestone through the POA&M PUT the field `isActive` must be set to `false`: `isActive=false`.
      operationId: updatePoamBySystemId
      parameters:
        - $ref: '#/components/parameters/systemId'
      requestBody:
        description: "Update an existing control by Id"
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PoamRequestPutBody"
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PoamResponsePut"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/400"          
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/401"
        '403':
          description: "Forbidden"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/403"                
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/404"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/500"

    delete:
      tags:
        - POAM
      summary: "Remove one or many POA&M items in a system"
      description: |-
        Remove the POA&M matching `systemId` path parameter and `poamId` query parameter<br>
      operationId: deletePoam
      parameters:
        - $ref: '#/components/parameters/systemId'
      requestBody:
        description: "Delete the given POA&M Id"
        content:
          application/json:
            schema:
              title: DeletePoam
              type: object
              required:
                - poamId
              additionalProperties: false
              properties:
                poamId:
                  type: integer
                  format: int64
                  description: "[Required] Unique item identifier"
                  example: 45
                  minimum: 1
                  maximum: 300
        required: true             
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PoamResponseDelete"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/400"          
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/401"
        '403':
          description: "Forbidden"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/403"                
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/404"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/500"

  /api/systems/{systemId}/poams/{poamId}:
    get:
      tags:
        - POAM
      summary: "Get POA&M item by ID in a system"
      description: "Returns system(s) containing POA&M items for matching parameters."
      operationId: getSystemPoamsByPoamId
      parameters:
        - $ref: '#/components/parameters/systemId'
        - $ref: '#/components/parameters/poamId'
      responses:
        '200':
          description: "Successful response"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PoamResponseGet"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/400"          
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/401"
        '403':
          description: "Forbidden"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/403"                
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/404"
        '405':
          description: "Method Not Allowed"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/405"
        '490':
          description: "API Rule Failed"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/490"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/500"

  #----------------------------------------------------------------------------
  # Milestones endpoint
  #----------------------------------------------------------------------------
  /api/systems/{systemId}/poams/{poamId}/milestones:
    get:
      tags:
        - Milestones
      summary: "Get milestones in one or many POA&M items in a system"
      description: |-
          Returns system containing milestones for matching parameters.
      operationId: getSystemMilestonesByPoamId
      parameters:
        - $ref: '#/components/parameters/systemId'
        - $ref: '#/components/parameters/poamId'
        - $ref: '#/components/parameters/scheduledCompletionDateStart'
        - $ref: '#/components/parameters/scheduledCompletionDateEnd'
      responses:
        '200':
          description: "Successful response"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MilestoneResponseGet"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/400"          
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/401"
        '403':
          description: "Forbidden"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/403"                
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/404"
        '405':
          description: "Method Not Allowed"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/405"
        '490':
          description: "API Rule Failed"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/490"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/500"

    post:
      tags:
        - Milestones
      summary: "Add milestones to one or many POA&M items in a system"
      description: |-
        Adds a milestone for given `systemId` and `poamId` path parameters

        **Request Body Required Fields**
        - `description`
        - `scheduledCompletionDate`

      operationId: addMilestoneBySystemIdAndPoamId
      parameters:
        - $ref: '#/components/parameters/systemId'
        - $ref: '#/components/parameters/poamId'
      requestBody:
        description: "Update an existing milestone"
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/MilestonesRequestPostBody"
        required: true
      responses:
        '200':
          description: "Successful response"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MilestoneResponsePost"
        '201':
          description: "Created"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/201"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/400"          
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/401"
        '403':
          description: "Forbidden"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/403"                
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/404"
        '405':
          description: "Method Not Allowed"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/405"
        '411':
          description: "Length Required"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/411"        
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/500"

    put:
      tags:
        - Milestones
      summary: "Update one or many POA&M items in a system"
      description: |-
        Updates a milestone for given `systemId` and `poamId` path parameters

        **Request Body Required Fields**
        - `milestoneId`
        - `description`
        - `scheduledCompletionDate`
      operationId: updateMilestoneBySystemIdAndPoamId
      parameters:
        - $ref: '#/components/parameters/systemId'
        - $ref: '#/components/parameters/poamId'
      requestBody:
        description: "Update an existing control by Id"
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/MilestonesRequestPutBody"
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MilestoneResponsePut"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/400"          
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/401"
        '403':
          description: "Forbidden"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/403"                
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/404"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/500"

    delete:
      tags:
        - Milestones
      summary: "Remove milestones in a system for one or many POA&M items"
      description: |-
        Remove the POA&M matching `systemId` path parameter<br>
        **Notes**<br>
        To delete a milestone the record must be inactive by having the field isActive set to false (`isActive=false`).
      operationId: deleteMilestone
      parameters:
        - $ref: '#/components/parameters/systemId'
        - $ref: '#/components/parameters/poamId'
      requestBody:
        description: "Delete the given Milestone Id"
        content:
          application/json:
            schema:
              title: DeleteMilestone
              type: object
              required:
                - milestoneId
              additionalProperties: false
              properties:
                milestoneId:
                  type: integer
                  format: int64
                  description: "[Required] Unique item identifier"
                  example: 19
                  minimum: 1
                  maximum: 300
        required: true 
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                #"$ref": "#/components/schemas/MilestonesDelete"
                "$ref": "#/components/schemas/Empty200Response"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/400"          
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/401"
        '403':
          description: "Forbidden"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/403"                
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/404"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/500"

  /api/systems/{systemId}/poams/{poamId}/milestones/{milestoneId}:
    get:
      tags:
        - Milestones
      summary: "Get milestone by ID in POA&M item in a system"
      description: |-
          Returns systems containing milestones for matching parameters.
      operationId: getSystemMilestonesByPoamIdAndMilestoneId
      parameters:
        - $ref: '#/components/parameters/systemId'
        - $ref: '#/components/parameters/poamId'
        - $ref: '#/components/parameters/milestoneId'
      responses:
        '200':
          description: "Successful response"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MilestoneResponseGet"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/400"          
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/401"
        '403':
          description: "Forbidden"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/403"                
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/404"
        '405':
          description: "Method Not Allowed"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/405"
        '490':
          description: "API Rule Failed"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/490"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/500"

  #----------------------------------------------------------------------------
  # Artifacts endpoint
  #----------------------------------------------------------------------------
  /api/systems/{systemId}/artifacts:
    get:
      tags:
        - Artifacts
      summary: "Get one or many artifacts in a system"
      description: |-
          Returns selected artifacts matching parameters to include the file name containing the artifacts.
      operationId: getSystemArtifacts
      parameters:
        - $ref: '#/components/parameters/systemId'
        - $ref: '#/components/parameters/filename'
        - $ref: '#/components/parameters/controlAcronyms'
        - $ref: '#/components/parameters/ccis'
        - $ref: '#/components/parameters/systemOnly'
      responses:
        '200':
          description: "Successful response"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ArtifactsResponseGet"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/400"          
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/401"
        '403':
          description: "Forbidden"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/403"                
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/404"
        '405':
          description: "Method Not Allowed"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/405"
        '490':
          description: "API Rule Failed"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/490"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/500"
    
    post:
      tags:
        - Artifacts
      summary: "Add one or many artifacts in a system"
      description: |-
          <strong>Information</strong><br>
          The request body of a POST request through the Artifact Endpoint accepts a single binary file
          with file extension ".zip" only. This accepted .zip file should contain one or more files
          corresponding to existing artifacts or new artifacts that will be created upon successful receipt.
          Filename uniqueness throughout eMASS will be enforced by the API.<br><br>
          Upon successful receipt of a file, if a file within the .zip is matched via filename to an artifact
          existing within the application, the file associated with the artifact will be updated. If no artifact
          is matched via filename to the application, a new artifact will be created with the following
          default values. Any values not specified below will be blank.
          <ul>
            <li>isTemplate: false</li>
            <li>type: other</li>
            <li>category: evidence</li>
          </ul>
          To update values other than the file itself, please submit a PUT request.<br>
          
          <strong>Zip file information</strong><br>
          Upload a zip file contain one or more files corresponding to existing artifacts
          or new artifacts that will be created upon successful receipt.<br><br>
          <strong>Business Rules</strong><br>
          Artifact cannot be saved if the file does not have the following file extensions:

              .docx,.doc,.txt,.rtf,.xfdl,.xml,.mht,.mh,tml,.html,.htm,.pdf,.mdb,.accdb,.ppt,
              .pptx,.xls,.xlsx,.csv,.log,.jpeg,.jpg,.tiff,.bmp,.tif,.png,.gif,.zip,.rar,.msg,
              .vsd,.vsw,.vdx,.z{#},.ckl,.avi,.vsdx

          Artifact version cannot be saved if an Artifact with the same file name already exist in the system.

          Artifact cannot be saved if the file size exceeds 30MB.
      operationId: addArtifactsBySystemId
      parameters:
        - $ref: '#/components/parameters/systemId'
      requestBody:
        description: "See `Information` posted above for additional instructions"
        content:
          multipart/form-data:
            schema:
              type: object
              required: [Zipper]
              properties:
                isTemplate:
                  type: boolean
                  example: false 
                type:
                  type: string
                  enum:
                    - Procedure
                    - Diagram
                    - Policy
                    - Labor
                    - Document
                    - Image
                    - Other
                    - Scan Result
                    - Auditor Report
                  example: "Other"
                category:
                  type: string
                  enum:
                    - Implementation Guidance
                    - Evidence
                  example: Evidence
                Zipper:
                  type: string
                  format: binary
        required: true
      responses:
        '200':
          description: "Successful response"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ArtifactsResponsePutPost"
        '201':
          description: "Created"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/201"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/400"          
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/401"
        '403':
          description: "Forbidden"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/403"                
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/404"
        '405':
          description: "Method Not Allowed"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/405"
        '411':
          description: "Length Required"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/411"        
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/500"

    put:
      tags:
        - Artifacts
      summary: "Update one or many artifacts in a system"
      description: |-
        Updates an artifact for given `systemId` path parameter<br><br>

        **Request Body Required Fields**
        - `filename`
        - `isTemplate`
        - `type`
        - `category`

      operationId: updateArtifactBySystemId
      parameters:
        - $ref: '#/components/parameters/systemId'
      requestBody:
        description: "See `information` above for additional instructions"
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ArtifactsRequestPutBody"
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ArtifactsResponsePutPost"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/400"          
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/401"
        '403':
          description: "Forbidden"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/403"                
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/404"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/500"

    delete:
      tags:
        - Artifacts
      summary: "Remove one or many artifacts in a system"
      description: |-
        Remove the Artifact(s) matching `systemId` path parameter and request body artifact(s) file name<br><br>
        <b>Note:</b>
        Multiple files can be deleted by providing multiple file names at the CL (comma delimited)

        Example: --files file1.txt, file2.txt
      operationId: deleteArtifact
      parameters:
        - $ref: '#/components/parameters/systemId'
      requestBody:
        description: "See notes above for additional information"
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ArtifactsDelete"
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ArtifactsResponseDel"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/400"          
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/401"
        '403':
          description: "Forbidden"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/403"                
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/404"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/500"

  #----------------------------------------------------------------------------
  # Artifacts Export endpoint
  #----------------------------------------------------------------------------
  /api/systems/{systemId}/artifacts-export:
    get:
      tags:
        - Artifacts Export
      summary: "Get the file of an artifact in a system"
      description: |-
         <strong>Sample Responce</strong><br>
          Binary file associated with given filename.<br>
          If `compress` parameter is specified, zip archive of binary file associated with given filename.
      operationId: getSystemArtifactsExport
      parameters:
        - $ref: '#/components/parameters/systemId'
        - $ref: '#/components/parameters/exportfilename'
        - $ref: '#/components/parameters/compress'
      responses:
        '200':
          description: "Successful retrieved Artifacts file"
          content:
            text/plain:
              schema:
                type: string
                example: "The requested file contents"
            application/octet-stream:
              schema:
                description: "Artifacts file ready for download"
                type: string
                format: binary
                example: "Binary file content for given filename"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/400"          
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/401"
        '403':
          description: "Forbidden"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/403"                
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/404"
        '405':
          description: "Method Not Allowed"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/405"
        '490':
          description: "API Rule Failed"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/490"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/500"

  #----------------------------------------------------------------------------
  # CAC endpoints
  #----------------------------------------------------------------------------
  /api/systems/{systemId}/approval/cac:
    get:
      tags:
       - CAC
      summary: "Get location of one or many controls in CAC"
      description: |-
          Returns the location of a system's package in the Control Approval Chain (CAC) for matching `systemId` path parameter
      operationId: getSystemCac
      parameters:
        - $ref: '#/components/parameters/systemId'
        - $ref: '#/components/parameters/controlAcronyms'
      responses:
        '200':
          description: "Successful response"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CacResponseGet"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/400"          
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/401"
        '403':
          description: "Forbidden"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/403"                
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/404"
        '405':
          description: "Method Not Allowed"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/405"
        '490':
          description: "API Rule Failed"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/490"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/500"

    post:
      tags:
        - CAC
      summary: "Submit control to second role of CAC"
      description: |-
        Adds a Control Approval Chain (CAC) for given `systemId` path parameter<br><br>
        POST requests will only yield successful results if the control is currently sitting at the first
        role of the CAC. If the control is not currently sitting at the first role, then an error will be
        returned.
      operationId: addSystemCac
      parameters:
        - $ref: '#/components/parameters/systemId'
      requestBody:
        description: "Update an existing Artifact by Id"
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CacRequestPostBody"
        required: true
      responses:
        '200':
          description: "Successful response"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CacResponsePost"
        '201':
          description: "Created"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/201"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/400"          
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/401"
        '403':
          description: "Forbidden"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/403"                
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/404"
        '405':
          description: "Method Not Allowed"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/405"
        '411':
          description: "Length Required"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/411"        
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/500"

  #----------------------------------------------------------------------------
  # PAC endpoints
  #----------------------------------------------------------------------------
  /api/systems/{systemId}/approval/pac:
    get:
      tags:
       - PAC
      summary: "Get location of system package in PAC"
      description: |-
          Returns the location of a system's package in the Package Approval Chain (PAC)
          for matching `systemId` path parameter
      operationId: getSystemPac
      parameters:
        - $ref: '#/components/parameters/systemId'
      responses:
        '200':
          description: "Successful response"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PacResponseGet"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/400"          
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/401"
        '403':
          description: "Forbidden"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/403"                
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/404"
        '405':
          description: "Method Not Allowed"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/405"
        '490':
          description: "API Rule Failed"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/490"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/500"

    post:
      tags:
        - PAC
      summary: "Submit system package for review"
      description: |-
        Adds a Package Approval Chain (PAC) for given `systemId` path parameter
      operationId: addSystemPac
      parameters:
        - $ref: "#/components/parameters/systemId"
      requestBody:
        description: "Update an existing Artifact by Id"
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PacRequestPostBody"
        required: true
      responses:
        '200':
          description: "Successful response"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PacResponsePost"
        '201':
          description: "Created"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/201"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/400"          
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/401"
        '403':
          description: "Forbidden"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/403"                
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/404"
        '405':
          description: "Method Not Allowed"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/405"
        '411':
          description: "Length Required"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/411"        
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/500"

  #----------------------------------------------------------------------------
  # CMMC Assessments endpoints
  #----------------------------------------------------------------------------
  /api/cmmc-assessments:
    get:
      tags:
       - CMMC Assessments
      summary: "Get CMMC assessment information"
      description: |-
          Get all CMMC assessment after the given date `sinceDate` parameter. It is available
          to CMMC eMASS only.
      operationId: getCmmcAssessments
      parameters:
        - $ref: '#/components/parameters/sinceDate'
      responses:
        '200':
          description: "Successful response"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CmmcResponseGet"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/400"          
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/401"
        '403':
          description: "Forbidden"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/403"                
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/404"
        '405':
          description: "Method Not Allowed"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/405"
        '490':
          description: "API Rule Failed"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/490"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/500"

  #----------------------------------------------------------------------------
  # Static Code Scans endpoints
  #----------------------------------------------------------------------------
  /api/systems/{systemId}/static-code-scans:
    post:
      tags:
        - Static Code Scans
      summary: "Upload static code scans or Clear static code scans"
      description: |-
        Upload or clear application scan findings into a system's `systemId` assets module.

        **Note:** To clear an application's findings, use only the field `clearFindings` as
        the Request body and set it to true.
      operationId: addStaticCodeScansBySystemId
      parameters:
        - $ref: "#/components/parameters/systemId"
      requestBody:
        description: "Update an existing Artifact by Id"
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/StaticCodeRequestPostBody"
        required: true
      responses:
        '200':
          description: "Successful response"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Success200Response"
        '201':
          description: "Created"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/201"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/400"          
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/401"
        '403':
          description: "Forbidden"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/403"                
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/404"
        '405':
          description: "Method Not Allowed"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/405"
        '411':
          description: "Length Required"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/411"        
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/500"

  #----------------------------------------------------------------------------
  # Workflow Definitions endpoints
  #----------------------------------------------------------------------------
  /api/workflow-definitions:
    get:
      tags:
       - Workflow Definitions
      summary: "Get workflow definitions in a site"
      description: |-
          View all workflow schemas available on the eMASS instance filtered by 
          status `includeInactive` and registration type `registrationType`.
      operationId: getWorkflowDefinitions
      parameters:
        - $ref: '#/components/parameters/includeInactive'
        - $ref: '#/components/parameters/registrationType'
      responses:
        '200':
          description: "Successful response"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/WorkflowDefinitionResponseGet"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/400"          
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/401"
        '403':
          description: "Forbidden"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/403"                
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/404"
        '405':
          description: "Method Not Allowed"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/405"
        '490':
          description: "API Rule Failed"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/490"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/500"

  #----------------------------------------------------------------------------
  # Workflow Instances endpoints
  #----------------------------------------------------------------------------
  /api/systems/{systemId}/workflow-instances:
    get:
      tags:
       - Workflow Instances
      summary: "Get workflow instances in a system"
      description: |-
        View detailed information on all active and historical workflows for a system
        `systemId` and filtered by provided parameters.
      operationId: getSystemWorkflowInstances
      parameters:
        - $ref: '#/components/parameters/systemId'
        - $ref: '#/components/parameters/includeComments'
        - $ref: '#/components/parameters/pageIndex'
        - $ref: '#/components/parameters/optionalSinceDate'
        - $ref: '#/components/parameters/status'
      responses:
        '200':
          description: "Successful response"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/WorkflowInstancesResponseGet"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/400"          
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/401"
        '403':
          description: "Forbidden"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/403"                
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/404"
        '405':
          description: "Method Not Allowed"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/405"
        '490':
          description: "API Rule Failed"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/490"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/500"

  /api/systems/{systemId}/workflow-instances/{workflowInstanceId}:
    get:
      tags:
       - Workflow Instances
      summary: "Get workflow instance by ID in a system"
      description: |-
        View detailed information on all active and historical workflows for a system
        `systemId` and `workflowInstanceId`.
      operationId: getSystemWorkflowInstancesByWorkflowInstanceId
      parameters:
        - $ref: '#/components/parameters/systemId'
        - $ref: '#/components/parameters/workflowInstanceId'
      responses:
        '200':
          description: "Successful response"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/WorkflowInstancesResponseGet"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/400"          
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/401"
        '403':
          description: "Forbidden"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/403"                
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/404"
        '405':
          description: "Method Not Allowed"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/405"
        '490':
          description: "API Rule Failed"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/490"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/500"

#-------------------------------------------------------------------------------
# C O M P O N E N T S
#-------------------------------------------------------------------------------
components:
  #----------------------------------------------------------------------------
  # Parameters
  #----------------------------------------------------------------------------
  parameters:
    #--------------------------------------------------------------------------
    # Path
    #-------------------------------------------------------------------------=
    roleCategory:
      name: roleCategory
      in: path
      description: "**Role Category**: The system role category been queried"
      required: true
      schema:
        type: string
        enum: ["CAC","PAC","Other"]
        default: "PAC"
    systemId:
      name: systemId
      in: path
      description: "**System Id**: The unique system record identifier."
      required: true
      schema:
        type: integer
        x-faker: random.number
        example: 35
    poamId:
      name: poamId
      in: path
      description: "**POA&M Id**: The unique POA&M record identifier."
      required: true
      schema:
        type: integer
        x-faker: random.number
        example: 45
    milestoneId:
      name: milestoneId
      in: path
      description: "**Milestone Id**: The unique milestone record identifier."
      required: true
      schema:
        type: integer
        x-faker: random.number
        example: 77
    workflowInstanceId:
      name: workflowInstanceId
      in: path
      description: "**Workflow Instance Id**: The unique milestone record identifier."
      required: true
      schema:
        type: integer
        x-faker: random.number
        example: 123
    #--------------------------------------------------------------------------
    # Query - Required --------------------------------------------------------
    role:
      name: role
      in: query
      description: "**Role**: Required parameter. Accepts single value from available options."
      required: true
      schema:
        type: string
        enum: ["AO","Auditor","Artifact Manager","C&A Team","IAO","ISSO","PM/IAM","SCA","User Rep (View Only)", "Validator (IV&V)"]
        default: "Validator (IV&V)"
    exportfilename:
      name: filename
      in: query
      required: true
      description: "**File Name**: The file name (to include file-extension)."
      schema:
        type: string
        example: ArtifactsExporFile.pdf
    sinceDate:
      name: sinceDate
      in: query
      required: true
      description: "**Date** CMMC date (Unix date format)"
      schema:
        type: string
        example: "1638764040"
    #--------------------------------------------------------------------------
    # Query - Optional --------------------------------------------------------
    includePackage:
      name: includePackage
      in: query
      description: "**Include Package**:  Indicates if additional packages information is retrieved for queried system."
      schema:
        type: boolean
        enum: [true, false]
        default: true
    registrationType:
      name: registrationType
      in: query
      description: |
        **Registration Type**: Filter record by selected registration type (single value or comma delimited values).

        *Available values:* assessAndAuthorize, assessOnly, guest, regular,
        functional, cloudServiceProvider, commonControlProvider 
      schema:
        type: string
        default: "regular"
    ditprId:
      name: ditprId
      in: query
      description: "**DITPR ID**: Filter query by DoD Information Technology (IT) Portfolio Repository (DITPR)."
      schema:
        type: string
    coamsId:
      name: coamsId
      in: query
      description: "**COAMS ID**: Filter query by Cyber Operational Attributes Management System (COAMS)."
      schema:
        type: string
    policy:
      name: policy
      in: query
      description: "**System Policy**: Filter query by system policy. If no value is specified and more than one policy is available, the default return is the RMF policy information."
      schema:
        type: string
        enum: ["diacap", "rmf", "reporting"]
        default: "rmf"
    acronyms:
      name: acronyms
      in: query
      description: "**Acronym**: The system acronym(s) being queried (single value or comma delimited values)."
      schema:
        type: string
        default: "PM-6"
    includeDitprMetrics:
      name: includeDitprMetrics
      in: query
      description: |-
        **Include DITPR**: Indicates if DITPR metrics are retrieved. This query string parameter can only be used in conjunction with the following parameters:<br>
          <ul>
            <li>registrationType</li>
            <li>policy</li>
          </ul>
      schema:
        type: boolean
        enum: [true, false]
        default: false
    includeDecommissioned:
      name: includeDecommissioned
      in: query
      description: "**Include Decommissioned Systems**: Indicates if decommissioned systems are retrieved. If no value is specified, the default returns true to include decommissioned systems."
      schema:
        type: boolean
        enum: [true, false]
        default: true
    reportsForScorecard:
      name: reportsForScorecard
      in: query
      description: "**DoD Cyber Hygiene Scorecard**: Indicates if the system reports to the DoD Cyber Hygiene Scorecard."
      schema:
        type: boolean
        enum: [true, false]
        default: true        
    filename:
      name: filename
      in: query
      description: "**File Name**: The file name (to include file-extension)."
      schema:
        type: string
        example: ArtifactsExporFile.pdf
    compress:
      name: compress
      in: query
      description: "**Compress File**: Determines if returned file is compressed."
      schema:
        type: boolean
        enum: [true, false]
        default: true
    controlAcronyms:
      name: controlAcronyms
      in: query
      description: "**System Acronym**: Filter query by given system acronym (single or comma separated)."
      schema:
        type: string
    ccis:
      name: ccis
      in: query
      description: "**CCI System**: Filter query by Control Correlation Identifiers (CCIs)."
      schema:
        type: string
    latestOnly:
      name: latestOnly
      in: query
      description: "**Latest Results Only**: Indicates that only the latest test resultes are retrieved (single or comma separated)."
      schema:
        type: boolean
        enum: [true, false]
        default: true
    scheduledCompletionDateStart:
      name: scheduledCompletionDateStart
      in: query
      description: "**Date Started**: Filter query by the scheduled completion start date (Unix date format)."
      schema:
        type: string
    scheduledCompletionDateEnd:
      name: scheduledCompletionDateEnd
      in: query
      description: "**Date Ended**: Filter query by the scheduled completion start date (Unix date format)."
      schema:
        type: string
    systemOnly:
      name: systemOnly
      in: query
      description: "**Systems Only**: Indicates that only system(s) information is retrieved."
      schema:
        type: boolean
        enum: [true, false]
        default: true
    description:
      name: description
      in: query
      description: "**Description**: Milestone description information."
      schema:
        type: string
    scheduledCompletionDate:
      name: scheduledCompletionDate
      in: query
      description: "**Completion Date**: Schedule completion date for milestone (Unix date format)."
      schema:
        type: string
    includeInactive:
      name: includeInactive
      in: query
      description: "**Include Inactive**: If no value is specified, the default returns false to not include outdated workflow definitions."
      schema:
        type: boolean
        enum: [true, false]
        default: true
    includeComments:
      name: includeComments
      in: query
      description: |
        **Include Comments**: If no value is specified, the default returns true to not include
        transition comments.

        Note: Corresponds to the Comments textbox that is required at most workflow transitions.
        Does not include other text input fields such as Terms / Conditions for Authorization.

      schema:
        type: boolean
        enum: [true, false]
        default: true
    pageIndex:
      name: pageIndex
      in: query
      description: "**Page Index**: If no value is specified, the default returns true to not include transition comments."
      schema:
        type: integer
        default: 0
    optionalSinceDate:
      name: sinceDate
      in: query
      description: |
        **Date**: Filter on authorization/assessment date (Unix date format).

        Note: Filters off the lastEditedDate field.

        Note: The authorization/assessment decisions on completed workflows 
        can be edited for up to 30 days after the initial decision is made.
      schema:
        type: string
        example: "1638764040"
    status:
      name: status
      in: query
      description: |
        **Status**: Filter by status.

        If no value is specified, the default returns all to include both active and inactive workflows.
        
        Note: Any workflows at a current stage of Complete or Cancelled are inactive.
        Ongoing workflows currently at other stages are active.
      schema:
        type: string
        enum: ["active", "inactive", "all"]
        default: "all"

  #----------------------------------------------------------------------------
  # Schemas
  #----------------------------------------------------------------------------
  schemas:
    #----------------------------------------------------------------------------
    # Request Body for (POSTs & PUTs)
    #----------------------------------------------------------------------------
    RegisterUserRequestPostBody:
      required: [user-uid]
      type: object
      properties:
        user-uid:
          type: string
          example: "MY.USERUUID.KEY"
    ControlsRequestPutBody:
      title: Controls Query Body
      type: object
      required:
        - acronym
        - responsibleEntities
        - controlDesignation
        - estimatedCompletionDate
        - implementationNarrative
      additionalProperties: false
      properties:
        acronym:
          type: string
          pattern: '^[A-Z0-9-]{3,6}'
          description: "[Required] Required to match the NIST SP 800-53 Revision 4."
          example: "AC-3"
        responsibleEntities:
          type: string
          description: "[Required] Include written description of Responsible Entities that are responsible for the Security Control. Character Limit = 2,000."
          x-faker: random.words
          example: "Unknown"
        implementationStatus:
          type: string
          description: "[Optional] Implementation Status of the Security Control for the information system."
          example: "Planned"
          enum: ["Planned", "Implemented", "Inherited", "Not Applicable", "Manually Inherited"]            
        commonControlProvider:
          type: string
          description: "[Conditional] Indicate the type of Common Control Provider for an “Inherited” Security Control."
          example: "DoD"
          enum: ["DoD", "Component", "Enclave"]
        naJustification:
          type: string
          description: "[Conditional] Provide justification for Security Controls deemed Not Applicable to the system."
          example: "System EOL within 120 days"
        controlDesignation:
          type: string
          description: "[Required] Control designations"
          example: "Common"
          enum: ["Common", "System-Specific", "Hybrid"]
        testMethod:
          type: string
          description: "[Optional] Identifies the assessment method / combination that will determine if the security requirements are implemented correctly."
          example: "Test"
          enum: ['Test', 'Interview', 'Examine', 'Test, Interview', 'Test, Examine', 'Interview, Examine','Test, Interview, Examine']        
        estimatedCompletionDate:
          type: integer
          description: "[Required] Field is required for Implementation Plan."
          example: 1638741660
          minimum: 1500000000
          maximum: 1900000000
        implementationNarrative:
          type: string
          description: "[Required] Includes security control comments. Character Limit = 2,000."
          x-faker: random.words
          example: "Test Imp. Narrative"
        slcmCriticality:
          type: string
          description: "[Conditional] Criticality of Security Control regarding SLCM. Character Limit = 2,000."
          x-faker: random.word
          example: "Test Criticality"
        slcmFrequency:
          type: string
          description: "[Conditional] SLCM frequency"
          example: "Annually"
          enum: ["Constantly", "Daily", "Weekly", "Monthly", "Quarterly", "Semi-Annually", "Annually", "Every Two Years", "Every Three Years", "Undetermined"]
        slcmMethod:
          type: string
          description: "[Conditional] SLCM method utilized"
          example: "Automated"
          enum: ["Automated", "Semi-Automated", "Manual", "Undetermined"]
        slcmReporting:
          type: string
          description: "[Conditional] Method for reporting Security Control for SLCM. Character Limit = 2,000."
          x-faker: random.word
          example: "Test Reporting"
        slcmTracking:
          type: string
          description: "[Conditional] How Non-Compliant Security Controls will be tracked for SLCM. Character Limit = 2,000."
          x-faker: random.word
          example: "Test Tracking"
        slcmComments:
          type: string
          description: "[Conditional] Additional comments for Security Control regarding SLCM. Character Limit = 4,000."
          x-faker: random.word
          example: "Test SLCM Comments"
        severity:
          type: string
          description: "[Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)"
          example: "Low"
          enum: ["Very Low", "Low", "Moderate", "High", "Very High"]
        vulnerabiltySummary:
          type: string
          description: "[Optional] Include vulnerability summary. Character Limit = 2,000."
          x-faker: random.words
          example: "Test Vulnerability Summary"
        recommendations:
          type: string
          description: "[Optional] Include recommendations. Character Limit = 2,000."
          x-faker: random.words
          example: "Test Recommendations"
        relevanceOfThreat:
          type: string
          description: "[Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)"
          example: "Low"
          enum: ["Very Low", "Low", "Moderate", "High", "Very High"]
        likelihood:
          type: string
          description: "[Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)"
          example: "Low"
          enum: ["Very Low", "Low", "Moderate", "High", "Very High"]
        impact:
          type: string
          description: "[Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)"
          example: "Low"
          enum: ["Very Low", "Low", "Moderate", "High", "Very High"]
        impactDescription:
          type: string
          description: "[Optional] Include description of Security Control's impact."
          x-faker: random.words
          example: "Impact text"
        residualRiskLevel:
          type: string
          description: "[Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)"
          example: "Low"
          enum: ["Very Low", "Low", "Moderate", "High", "Very High"]
    TestResultsRequestPostBody:
      title: Test Results Query Body
      type: object
      required:
        - cci
        - testedBy
        - testDate
        - description
        - complianceStatus
      additionalProperties: false
      properties:
        cci:
          type: string
          pattern: '^\d{5,6},\d{5,6}'
          description: "[Required] CCI associated with test result."
          example: "000001"
        testedBy:
          type: string
          description: "[Required] Last Name, First Name. 100 Characters."
          x-faker: name.findName
          example: "Smith, Joe"
        testDate:
          type: integer
          format: int64
          description: "[Required] Unix time format."
          example: 1638741660
          minimum: 1500000000
          maximum: 1900000000
        description:
          type: string
          description: "[Required] Include description of test result. 4000 Characters."
          x-faker: random.words
          example: "Test result description"
        complianceStatus:
          type: string
          description: "[Required] Test result compliance status"
          example: "Compliant"
          enum: ["Compliant", "Non-Compliant", "Not Applicable"]
    PoamRequestPostBody:
      title: POAM POST Query Body
      type: object
      required:
        - status
        - vulnerabilityDescription
        - sourceIdentVuln
        - pocOrganization
        - resources
      additionalProperties: false
      "$ref": "#/components/schemas/PoamRequiredPost"
    PoamRequestPutBody:
      title: POAM PUT Query Body
      type: object
      required:
        - poamId
        - displayPoamId
        - status
        - vulnerabilityDescription
        - sourceIdentVuln
        - pocOrganization
        - reviewStatus
      additionalProperties: false
      "$ref": "#/components/schemas/PoamRequiredPut"
    MilestonesRequestPostBody:
      title: Milestones POST Query Body
      type: object
      required:
        - poamId
        - description
        - scheduledCompletionDate      
      additionalProperties: false
      properties:
        poamId:
          type: integer
          format: int64
          description: "[Required] Unique POA&M item identifier."
          example: 45
          minimum: 1
          maximum: 300
        description:
          type: string
          description: "[Required] Provide a description of the milestone."
          x-faker: random.words
          example: "Description text"
        scheduledCompletionDate:
          type: integer
          format: int64
          description: "[Required] Unix date format."
          example: 1599644800
          minimum: 1500000000
          maximum: 1900000000    
    MilestonesRequestPutBody:
      title: Milestones PUT Query Body
      type: object
      required:
        - milestoneId
        - description
        - scheduledCompletionDate        
      additionalProperties: false
      properties:
        milestoneId:
          type: integer
          format: int64
          description: "[Required] Unique milestone identifier."
          example: 19
          minimum: 1
          maximum: 300
        description:
          type: string
          description: "[Required] Provide a description of the milestone."
          x-faker: random.words
          example: "Description text"
        scheduledCompletionDate:
          type: integer
          format: int64
          description: "[Required] Unix date format."
          example: 1599644800
          minimum: 1500000000
          maximum: 1900000000    
    ArtifactsRequestPutBody:
      title: Artifacts PUT Query Body
      type: object
      required:
        - filename
        - isTemplate
        - type
        - category
      additionalProperties: false
      properties:
        # Required fields
        filename:
          type: string
          description: "[Required] File name should match exactly one file within the provided zip file. 1000 Characters."
          x-faker: system.commonFileName
          example: "AutorizationGuidance.pdf"
        isTemplate:
          type: boolean
          description: "[Required] Indicates it is an artifact template."
          x-faker: random.boolean
          example: false
        type:
          type: string
          description: "[Required] Artifact type options"
          example: "Policy"
          enum: ["Procedure", "Diagram", "Policy", "Labor", "Document", "Image", "Other", "Scan Result"]            
        category:
          type: string
          description: "[Required] Artifact category options"
          example: "Change Request"
          enum: ["Implementation Guidance", "Evidence"]
        # Optional fields
        description:
          type: string
          description: "[Optional] Artifact description. 2000 Characters."
          x-faker: random.words
          example: "Artifact description text"        
        refPageNumber:
          type: string
          description: "[Optional] Artifact reference page number. 50 Characters."
          x-faker: random.words
          example: "Reference page number"
        ccis:
          type: string
          pattern: '^\d{5,6},\d{5,6}'
          description: "[Required] CCI associated with test result."
          example: "000001,000002"                
        controls:
          type: string
          pattern: '^[A-Z0-9-]{3,6}'
          description: "[Optional] Control acronym associated with the artifact. NIST SP 800-53 Revision 4 defined."
          example: "AC-8,AC-2(4)"     
        artifactExpirationDate:
          type: integer
          format: int64
          description: "[Optional] Date Artifact expires and requires review. In Unix Date format."
          example: 1549036928
          minimum: 1500000000
          maximum: 1900000000
        lastReviewedDate:
          type: integer
          format: int64
          description: "[Optional]] Date Artifact was last reviewed.. Unix time format."
          example: 1549036928
          minimum: 1500000000
          maximum: 1900000000
    CacRequestPostBody:
      title: CAC POST Query Body
      type: object
      additionalProperties: false
      properties:
        controlAcronym:
          type: string
          description: "[Required] System acronym name."
          x-faker: finance.bic
          example: "AC-3"
        comments:
          type: string
          description: "[Conditional] Control Approval Chain comments - 2000 Characters."
          x-faker: random.words
          example: "Control Approval Chain comments text."
    PacRequestPostBody:
      title: PAC POST Query Body
      type: object
      properties:
        workflow:
          type: string
          description: "[Required] The PAC workflow"
          example: "Assess and Authorize"
          enum: ["Assess and Authorize", "Assess Only", "Security Plan Approval"]
        name:
          type: string
          description: "[Required] Package name. 100 Characters."
          x-faker: random.word
          example: "Package name text"
        comments:
          type: string
          description: "[Required] Character Limit = 4,000."
          x-faker: random.words
          example: "Comments text."      
    StaticCodeRequestPostBody:
      title: Static Code PUT Query Body
      type: object
      additionalProperties: false
      $ref: "#/components/schemas/StaticCodeRequiredPost"
 
    #----------------------------------------------------------------------------
    # Request Body supporting fields for (POSTs & PUTs)
    #----------------------------------------------------------------------------
    PoamRequiredPost:
      title: POAM POST Required Fields
      type: object
      additionalProperties: false
      properties:
        # Required fields
        status:
          type: string
          description: "[Required] Values include the following: (Ongoing,Risk Accepted,Completed,Not Applicable"
          example: "Completed"
          enum:
            - "Ongoing"
            - "Risk Accepted"
            - "Completed"
            - "Not Applicable"
        vulnerabilityDescription:
          type: string
          description: "[Required] Provide a description of the POA&M Item. 2000 Characters."
          x-faker: random.words
          example: "Description text"
        sourceIdentVuln:
          type: string
          description: "[Required] Include Source Identifying Vulnerability text. 2000 Characters."
          x-faker: random.words
          example: "Source Indentifying Vulnerability text"

          enum:
            - "Not Approved"
            - "Under Review"
            - "Approved"           
        pocOrganization:
          type: string
          description: "[Required] Organization/Office represented. 100 Characters."
          x-faker: company.companyName
          example: "Army"
        resources:
          type: string
          description: "[Required] List of resources used. 250 Characters."
          x-faker: random.words
          example: "Resource text."        
        # Optional/Required fields (REQ based on business rules)
        pocFirstName:
          type: string
          description: "[Required] First name of POC. 100 Characters."
          x-faker: name.firstName
          example: "John"
        pocLastName:
          type: string
          description: "[Required] Last name of POC. 100 Characters."
          x-faker: name.lastName
          example: "Smith"
        pocEmail:
          type: string
          description: "[Required] Email address of POC. 100 Characters."
          x-faker: internet.email
          example: "smith@ah.com"
        pocPhoneNumber:
          type: string
          description: "[Required] Phone number of POC (area code) ***-**** format. 100 Characters."
          x-faker: phone.phoneNumber.email
          example: "555-555-5555"
        # Optional Fields
        externalUid:
          type: string
          description: "[Optional] Unique identifier external to the eMASS application for use with associating POA&Ms. 100 Characters."
          x-faker: random.uuid
          example: "d6d98b88-c866-4496-9bd4-de7ba48d0f52"
        controlAcronym:
          type: string
          description: "[Optional] Control acronym associated with the POA&M Item. NIST SP 800-53 Revision 4 defined."
          x-faker: finance.bic
          example: “AC-3”
        cci:
          type: string
          pattern: '^\d{5,6},\d{5,6}'
          description: "[Optional] CCI associated with POA&M."
          example: "000001"        
        securityChecks:
          type: string
          description: "[Optional] Security Checks that are associated with the POA&M."
          x-faker: random.words
          example: "SV-25123r1_rule,2016-A-0279"
        rawSeverity:
          type: string
          description: "[Optional] Values include the following options (I,II,III)"
          example: "I"
          enum:
            - "I"
            - "II"
            - "III"
        relevanceOfThreat:
          type: string
          description: "[Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)"
          example: "Low"
          enum:
            - "Very Low"
            - "Low"
            - "Moderate"
            - "High"
            - "Very High"
        likelihood:
          type: string
          description: "[Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)"
          example: "Low"
          enum:
            - "Very Low"
            - "Low"
            - "Moderate"
            - "High"
            - "Very High"
        impact:
          type: string
          description: "[Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)"
          example: "Low"
          enum:
            - "Very Low"
            - "Low"
            - "Moderate"
            - "High"
            - "Very High"
        impactDescription:
          type: string
          description: "[Optional] Include description of Security Control’s impact."
          x-faker: random.words
          example: "Impact text"
        residualRiskLevel:
          type: string
          description: "[Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)"
          example: "Low"
          enum:
            - "Very Low"
            - "Low"
            - "Moderate"
            - "High"
            - "Very High"
        recommendations:
          type: string
          description: "[Optional] Include recommendations. Character Limit = 2,000."
          x-faker: random.words
          example: "Recommendations text"        
        mitigation:
          type: string
          description: "[Optional] Include mitigation explanation. 2000 Characters."
          x-faker: random.words
          example: "Mitigation text"
        # Conditional Fields
        severity:
          type: string
          description: "[Conditional] Required for approved items. Values include the following options: (Very Low, Low, Moderate,High,Very High)"
          example: "Low"
          enum:
            - "Very Low"
            - "Low"
            - "Moderate"
            - "High"
            - "Very High"        
        scheduledCompletionDate:
          type: integer
          format: int64
          description: "[Conditional] Required for ongoing and completed POA&M items. Unix time format."
          example: 1599644800
          minimum: 1500000000
          maximum: 1900000000
        comments:
          type: string
          description: "[Conditional] Field is required for completed and risk accepted POA&M items. 2000 Characters"
          x-faker: random.words
          example: "Comments text."
        completionDate:
          type: integer
          format: int64
          description: "[Conditional] Field is required for completed POA&M items. Unix time format."
          example: 1505916276
          minimum: 1500000000
          maximum: 1900000000
        milestones:
            type: array
            minimum: 1
            maxItems: 3
            items:
              $ref: "#/components/schemas/MilestonesRequiredPost"
    PoamRequiredPut:
      title: POAM PUT Required Fields
      type: object
      additionalProperties: false
      properties:
        # Required fields
        poamId:
          type: integer
          format: int64
          description: "[Required] Unique item identifier"
          example: 45
          minimum: 1
          maximum: 300
        displayPoamId:
          type: integer
          format: int64
          description: "[Required] Globally unique identifier for individual POA&M Items, seen on the front-end as “ID”."
          example: 450000000
          minimum: 100000000
          maximum: 101003239          
        status:
          type: string
          description: "[Required] The POA&M status"
          example: "Completed"
          enum: ["Ongoing","Risk Accepted","Completed","Not Applicable"]
        vulnerabilityDescription:
          type: string
          description: "[Required] Provide a description of the POA&M Item. 2000 Characters."
          x-faker: random.words
          example: "Description text"
        sourceIdentVuln:
          type: string
          description: "[Required] Include Source Identifying Vulnerability text. 2000 Characters."
          x-faker: random.words
          example: "Source Indentifying Vulnerability text"
        pocOrganization:
          type: string
          description: "[Required] Organization/Office represented. 100 Characters."
          x-faker: company.companyName
          example: "Army"          
        resources:
          type: string
          description: "[Required] List of resources used. 250 Characters."
          x-faker: random.words
          example: "Resource text."
        # Optional Fields
        externalUid:
          type: string
          description: "[Optional] Unique identifier external to the eMASS application for use with associating POA&Ms. 100 Characters."
          x-faker: random.uuid
          example: "d6d98b88-c866-4496-9bd4-de7ba48d0f52"
        controlAcronym:
          type: string
          description: "[Optional] Control acronym associated with the POA&M Item. NIST SP 800-53 Revision 4 defined."
          x-faker: finance.bic
          example: “AC-3”
        cci:
          type: string
          pattern: '^\d{5,6},\d{5,6}'
          description: "CCI associated with POA&M."
          example: "000001"        
        securityChecks:
          type: string
          description: "[Optional] Security Checks that are associated with the POA&M."
          x-faker: random.words
          example: "SV-25123r1_rule,2016-A-0279"
        rawSeverity:
          type: string
          description: "[Optional] Values include the following options (I,II,III)"
          example: "I"
          enum: ["I","II","III"]
        relevanceOfThreat:
          type: string
          description: "[Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)"
          example: "Low"
          enum: ["Very Low","Low", "Moderate","High","Very High"]
        likelihood:
          type: string
          description: "[Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)"
          example: "Low"
          enum: ["Very Low","Low", "Moderate","High","Very High"]
        impact:
          type: string
          description: "[Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)"
          example: "Low"
          enum: ["Very Low","Low", "Moderate","High","Very High"]
        impactDescription:
          type: string
          description: "[Optional] Include description of Security Control’s impact."
          x-faker: random.words
          example: "Impact text"
        residualRiskLevel:
          type: string
          description: "[Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)"
          example: "Low"
          enum: ["Very Low","Low", "Moderate","High","Very High"]
        recommendations:
          type: string
          description: "[Optional] Include recommendations. Character Limit = 2,000."
          x-faker: random.words
          example: "Recommendations text"        
        mitigation:
          type: string
          description: "[Optional] Include mitigation explanation. 2000 Characters."
          x-faker: random.words
          example: "Mitigation text"
        # Conditional Fields
        pocFirstName:
          type: string
          description: "[Conditional] First name of POC. 100 Characters."
          x-faker: name.firstName
          example: "John"
        pocLastName:
          type: string
          description: "[Conditional] Last name of POC. 100 Characters."
          x-faker: name.lastName
          example: "Smith"
        pocEmail:
          type: string
          description: "[Conditional] Email address of POC. 100 Characters."
          x-faker: internet.email
          example: "smith@ah.com"
        pocPhoneNumber:
          type: string
          description: "[Conditional] Phone number of POC (area code) ***-**** format. 100 Characters."
          x-faker: phone.phoneNumber.email
          example: "555-555-5555"
        severity:
          type: string
          description: "[Conditional] Required for approved items. Values include the following options: (Very Low, Low, Moderate,High,Very High)"
          example: "Low"
          enum: ["Very Low","Low", "Moderate","High","Very High"]
        scheduledCompletionDate:
          type: integer
          format: int64
          description: "[Conditional] Required for ongoing and completed POA&M items. Unix time format."
          example: 1599644800
          minimum: 1500000000
          maximum: 1900000000
        completionDate:
          type: integer
          format: int64
          description: "[Conditional] Field is required for completed POA&M items. Unix time format."
          example: 1505916276
          minimum: 1500000000
          maximum: 1900000000
        comments:
          type: string
          description: "[Conditional] Field is required for completed and risk accepted POA&M items. 2000 Characters"
          x-faker: random.words
          example: "Comments text."
        isActive:
          type: boolean
          description: "[Conditional] Optionally used in PUT to delete milestones when updating a POA&M."
          x-faker: random.boolean
          example: true   
        milestones:
            type: array
            minimum: 1
            maxItems: 3
            items:
              $ref: "#/components/schemas/MilestonesRequiredPut"
    MilestonesRequiredPost:
      title: Milestones
      type: object
      required:
        - description
        - scheduledCompletionDate  
      additionalProperties: false
      properties:
        description:
          type: string
          description: "[Required] Include milestone description."
          x-faker: random.words
          example: "Description text"
        scheduledCompletionDate:
          type: integer
          format: int64
          description: "[Required] Required for ongoing and completed POA&M items. Unix time format."
          example: 1599644800
          minimum: 1500000000
          maximum: 1900000000
    MilestonesRequiredPut:
      title: Milestones
      type: object
      required:
        - milestoneId
        - description
        - scheduledCompletionDate  
      additionalProperties: false
      properties:
        milestoneId:
          type: integer
          format: int64
          description: "[Required] Unique item identifier"
          example: 19
          minimum: 1
          maximum: 300
        description:
          type: string
          description: "[Required] Include milestone description."
          x-faker: random.words
          example: "Description text"
        scheduledCompletionDate:
          type: integer
          format: int64
          description: "[Required] Shecdule completion date. Unix time format."
          example: 1599644800
          minimum: 1500000000
          maximum: 1900000000
    StaticCodeRequiredPost:
      title: StaticCode
      type: object
      additionalProperties: false
      properties:
        application:
          type: object
          properties:
            applicationName:
              type: string
              description: "[Required] Name of the software application that was assessed."
              x-faker: company.companyName
              example: 'Artemis'
            version:
              type: string
              description: "[Required] The version of the application."
              x-faker: system.semver
              example: 'Version 5.0'
        applicationFindings:
          type: array
          minimum: 1
          maxItems: 3
          items:
            $ref: "#/components/schemas/StaticCodeApplication"
    StaticCodeApplication:
      title: Static Code Application POST object"
      type: object
      additionalProperties: false
      properties:
        rawSeverity:
          type: string
          description: "[Optional] Scan vulnerability ratting"
          example: "Moderate"
          enum: [Low, Medium, Moderate, High, Critical]
        codeCheckName:
          type: string
          description: "[Required] Name of the software vulnerability or weakness."
          example: "Hidden Field"
          enum: ['Hidden Field', 'Redundant Check', 'Invalid Field', 'Vulnerable Field']
        count:
          type: integer
          format: int64
          description: "[Optional] Number of instances observed for a specified finding."
          example: 14
          minimum: 1
          maximum: 50
        scanDate:
          type: integer
          format: int64
          description: "[Required] The date of the scan. Unix date format."
          example: 1625070000
          minimum: 1500000000
          maximum: 1900000000
        cweId:
          type: string
          description: '[Required] The Common Weakness Enumerator (CWE) identifier.'
          x-faker: number.number
          example: '155'
        clearFindings:
          type: boolean
          description: "[Optional] When used by itself, can clear out all application findings for a single application/version pairing."
          x-faker: random.boolean
          example: false          
    #----------------------------------------------------------------------------
    # 200 Responses
    #----------------------------------------------------------------------------
    Test:
      title: "api GET response schema"    
      type: object
      properties:
        meta:
          "$ref": "#/components/schemas/200"
        data:
          type: object
          additionalProperties: false
          properties:
            success:
              type: boolean
              x-faker: random.boolean
              example: true
    Register:
      title: "api-key POST response schema"
      type: object
      properties:
        meta:
           "$ref": "#/components/schemas/200"
        data:
          type: object
          additionalProperties: false
          properties:
            apikey:
              type: string
              x-faker: random.uuid
              example: f32516cc-57d3-43f5-9e16-8f86780a4cce
    SystemResponse:
      title: "Systems GET response schema"
      type: object
      additionalProperties: false
      properties:
        meta:
          "$ref": "#/components/schemas/200"
        data:
          type: array
          maxItems: 1
          items:
            $ref: "#/components/schemas/Systems"
    SystemRolesResponse:
      title: "Roles GET response schema"
      type: object
      additionalProperties: false
      properties:
        meta:
          "$ref": "#/components/schemas/200"
        data:
          type: array
          items:
            type: object
            properties:
              roleCategory:
                type: string
                x-faker: random.word
                default: "PAC"
              role:
                type: string
                x-faker: random.words
                default: "PM/IAM"
    SystemRolesCategoryResponse:
      title: "Roles by category GET response schema"    
      type: object
      additionalProperties: false
      properties:
        meta:
          "$ref": "#/components/schemas/200"
        data:
          type: array
          maxItems: 4
          items:
            $ref: "#/components/schemas/RoleCategory"
    ControlsResponseGet:
      title: "Controls GET response schema"      
      type: object
      additionalProperties: false
      properties:
        meta:
          "$ref": "#/components/schemas/200"
        data:
          type: array
          maxItems: 5
          items:
            $ref: '#/components/schemas/ControlsGet'
    ControlsResponsePut:
      title: "Controls PUT response schema"      
      type: object
      additionalProperties: false
      properties:
        meta:
          "$ref": "#/components/schemas/200"
        data:
          type: array
          maxItems: 1
          items:
            $ref: "#/components/schemas/ControlsPut"
    TestResultsResponseGet:
      title: "Test Results GET response schema"      
      type: object
      additionalProperties: false
      properties:
        meta:
          "$ref": "#/components/schemas/200"
        data:
          type: array
          maxItems: 5
          items:
            $ref: "#/components/schemas/TestResultsGet"
    TestResultsResponsePost:
      title: "Test Results POST response schema"      
      type: object
      additionalProperties: false
      properties:
        meta:
          "$ref": "#/components/schemas/200"
        data:
          type: array
          maxItems: 1
          items:
            $ref: "#/components/schemas/TestResultsPost"
    PoamResponseGet:
      title: "POAMS GET response schema"      
      type: object
      additionalProperties: false
      properties:
        meta:
          "$ref": "#/components/schemas/200"
        data:
          type: array
          maxItems: 5
          items:
            $ref: "#/components/schemas/PoamGet"
    PoamResponsePost:
      title: "POAMS POST response schema"        
      type: object
      additionalProperties: false
      properties:
        meta:
          "$ref": "#/components/schemas/200"
        data:
          type: array
          maxItems: 1
          items:
            $ref: "#/components/schemas/PoamPost"
    PoamResponsePut:
      title: "POAMS PUT response schema"        
      type: object
      additionalProperties: false
      properties:
        meta:
          "$ref": "#/components/schemas/200"
        data:
          type: array
          maxItems: 1
          items:
            $ref: "#/components/schemas/PoamPut"
    PoamResponseDelete:
      title: "POAMS DELETE response schema"      
      type: object
      additionalProperties: false
      properties:
        meta:
          "$ref": "#/components/schemas/200"
        data:
          type: array
          maxItems: 1
          items:
            $ref: "#/components/schemas/PoamDelete"                     
    MilestoneResponseGet:
      title: "Milestones GET response schema"      
      type: object
      additionalProperties: false
      properties:
        meta:
          "$ref": "#/components/schemas/200"
        data:
          type: array
          maxItems: 10
          items:
            $ref: "#/components/schemas/MilestonesGet"
    MilestoneResponsePost:
      title: "Milestones POST response schema"        
      type: object
      additionalProperties: false
      properties:
        meta:
          "$ref": "#/components/schemas/200"
        data:
          type: array
          maxItems: 1
          items:
            $ref: "#/components/schemas/MilestonesPost"
    MilestoneResponsePut:
      title: "Milestones PUT response schema"        
      type: object
      additionalProperties: false
      properties:
        meta:
          "$ref": "#/components/schemas/200"
        data:
          type: array
          maxItems: 1
          items:
            $ref: "#/components/schemas/MilestonesPut"
    ArtifactsResponseGet:
      title: "Artifacts GET response schema"        
      type: object
      additionalProperties: false
      properties:
        meta:
          "$ref": "#/components/schemas/200"
        data:
          maxItems: 10
          type: array
          items:
            $ref: '#/components/schemas/ArtifactsGet'
    ArtifactsResponseDel:
      title: "Artifacts DELETE response schema"        
      type: object
      additionalProperties: false
      properties:
        meta:
          "$ref": "#/components/schemas/200"
        data:
          maxItems: 1
          minItems: 1
          type: array
          items:
            additionalProperties: false
            properties:
              filename:
                type: string
                description: "[Required] File name should match exactly one file within the provided zip file. 1000 Characters."
                x-faker: system.commonFileName
                example: "AutorizationGuidance.pdf"
              success:
                type: boolean
                x-faker: random.boolean
                example: true
              systemId:
                type: integer
                format: int64
                example: 35
                minimum: 1
                maximum: 3000
    ArtifactsResponsePutPost:
      title: "Artifacts POST and PUT response schema"    
      type: object
      additionalProperties: false
      properties:
        meta:
          "$ref": "#/components/schemas/200"
        data:
          maxItems: 1
          minItems: 1
          type: array
          items:
            type: object
            additionalProperties: false
            properties:
              filename:
                type: string
                description: "[Required] File name should match exactly one file within the provided zip file. 1000 Characters."
                x-faker: system.commonFileName
                example: "AutorizationGuidance.pdf"
              success:
                type: boolean
                x-faker: random.boolean
                example: true
              systemId:
                type: integer
                format: int64
                example: 35
                minimum: 1
                maximum: 3000
    CacResponseGet:
      title: "CAC GET response schema"
      type: object
      additionalProperties: false
      properties:
        meta:
          "$ref": "#/components/schemas/200"
        data:
          maxItems: 10
          type: array
          items:
            $ref: '#/components/schemas/CacGet'
    CacResponsePost:
      title: "CAC POST response schema"
      type: object
      additionalProperties: false
      properties:
        meta:
          "$ref": "#/components/schemas/200"
        data:
          maxItems: 1
          minItems: 1
          type: array
          items:
            type: object
            additionalProperties: false
            properties:
              controlAcronym:
                type: string
                pattern: '^[A-Z0-9-]{3,6}'
                description: "[Required] System acronym name."
                example: "AC-3"
              success:
                type: boolean
                x-faker: random.boolean
                example: true
              systemId:
                type: integer
                format: int64
                example: 35
                minimum: 1
                maximum: 3000
    PacResponseGet:
      title: "PAC GET response schema"
      type: object
      additionalProperties: false
      properties:
        meta:
          "$ref": "#/components/schemas/200"
        data:
          maxItems: 10
          type: array
          items:
            $ref: '#/components/schemas/PacGet'
    PacResponsePost:
      type: object
      additionalProperties: false
      properties:
        meta:
          "$ref": "#/components/schemas/200"
        data:
          maxItems: 1
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/PacPost'
    CmmcResponseGet:
      title: "CMMC GET response schema"
      type: object
      additionalProperties: false
      properties:
        meta:
          "$ref": "#/components/schemas/200"
        data:
          maxItems: 2
          type: array
          items:
            $ref: '#/components/schemas/CmmcGet'    
    WorkflowDefinitionResponseGet:
      title: "Workflow Definition GET response schema"
      type: object
      additionalProperties: false
      properties:
        meta:
          "$ref": "#/components/schemas/200"
        data:
          maxItems: 1
          type: array
          items:
            $ref: '#/components/schemas/WorkflowDefinitionGet'       
    WorkflowInstancesResponseGet:
      title: "Workflow Instances GET response schema"
      type: object
      additionalProperties: false
      properties:
        meta:
          "$ref": "#/components/schemas/200"
        data:
          maxItems: 2
          type: array
          items:
            $ref: '#/components/schemas/WorkflowInstancesGet'
    Success200Response:
      title: "Default success response schema"
      type: object
      additionalProperties: false
      properties:
        meta:
          "$ref": "#/components/schemas/200"
        data:
          maxItems: 1
          minItems: 1
          type: array
          items:
            type: object
            additionalProperties: false
            properties:

              success:
                type: boolean
                x-faker: random.boolean
                example: true           
    Empty200Response:
      type: object

    #----------------------------------------------------------------------------
    # Supporting 200 Responses - Endpoint response - returned values
    #----------------------------------------------------------------------------
    # System Response for both cases: 
    #    (includeDitprMetrics=true) or (includePackage=true, includeDecommissioned=false)
    Systems:
      title: "Systems - return query from the server for the GET call"
      type: object
      additionalProperties: false
      properties:
        systemId:
          type: integer
          format: int64
          description: "[Read-only] Unique system record identifier."
          example: 35
          minimum: 1
          maximum: 3000
        policy:
          type: string
          description: "[Read-only] RMF/DIACAP Policy identifier for the system record."
          example: RMF
          enum: ["RMF", "DIACAP"]
        registrationType:
          type: string
          description: "[Read-Only] Registration types parameters (assessAndAuthorize, assessOnly, guest, regular, functional, cloudServiceProvider.)"
          example: "Assess and Authorize"
          enum: ["Assess and Authorize", "Assess Only", "Guest", "Regular", "Functional", "Cloud Service Provider", "Common Control Provider"]
        name:
          type: string
          description: "[Read-only] Name of the system record."
          x-faker: company.companyName
          example: "System XYZ"
        acronym:
          type: string
          pattern: '^[A-Z0-9-]{3,6}'
          description: "[Read-only] Acronym of the system record."
          example: "PM-6"
        description:
          type: string
          description: "[Read-only] Description of the system record."
          x-faker: random.words
          example: "This is a test system for the eMASS API documentation"
        systemOwner:
          type: string
          description: "[Read-only] Owning organization of the system record."
          x-faker: company.companyName
          example: "DISA"
        organizationName:
          type: string
          description: "[Read-only] Name of the top-level component that owns the system (e.g. Navy, Air Force, Army, etc..)."
          example: "Defense Information Systems Agency"
          enum: ["Army", "Navy", "Air Force", "Marines", "DoD", "Defense Information Systems Agency"]
        secondaryOrganization:
          type: string
          description: "[Read-only] Secondary organization that owns the system record (i.e. Sub-Organization-level."
          x-faker: company.companyName
          example: "ID31"        
        versionReleaseNo:
          type: string
          description: "[Read-only] Version/Release Number of system record."
          x-faker: system.semver
          example: "V1"        
        systemType:
          type: string
          description: "[Read-only] Type of the system record. RMF values include the following options (IS Major Application, IS Enclave, Platform IT System). DIACAP values include the following options (Platform IT, Interconnection, AIS Application)"
          example: "IS Major Application"
          enum: ["IS Major Application", "IS Enclave", "Platform IT", "Platform IT System", "Platform IT Interconnection", "AIS Application", "Outsourced IT-Based Process (DoD-controlled)", "Enclave", "Outsourced IT-Based Process (service provider shared)"]
        isNSS:
          type: boolean
          description: "[Read-only] Is the system record a National Security System?"
          x-faker: random.boolean
          example: true
        isPublicFacing:
          type: boolean
          description: "[Read-only] Does the system record have a public facing component/presence."
          x-faker: random.boolean
          example: true
        coamsId:
          type: integer
          format: int64
          description: "[Read-only] Corresponding Cyber Operational Attributes Management System (COAMS) identifier for the system record."
          example: 93054
          minimum: 40000
          maximum: 98536
        isTypeAuthorization:
          type: boolean
          description: "[Read-only] Identifies if system is a Type Authorization."
          x-faker: random.boolean
          example: true
        ditprId:
          type: string
          pattern: '^\d{5}'
          description: "[Read-only] DITPR ID of the system record."
          example: "30498"
        authorizationStatus:
          type: string
          description: "[Read-only] Authorization Status of the system record."
          example: "Authority to Operate (ATO)"
          enum: ["Authority to Operate (ATO)", "Authority to Operate with Conditions (ATO) w/Conditions)", 
                 "Interim Authority to Test (IATT)", "Interim Authority to Operate (IATO)",
                 "Denied Authority to Operate (DATO)", "Not Yet Authorized", "Unaccredited", "Decommissioned"]
        authorizationDate:
          type: integer
          description: "[Read-only] Authorization Date of the system record."
          example: 1638741660
          minimum: 1500000000
          maximum: 1900000000
        authorizationTerminationDate:
          type: integer
          description: "[Read-only] Authorization Termination Date of the system record."
          example: 1638741660
          minimum: 1500000000
          maximum: 1900000000
        authorizationLength:
          type: integer
          description: "[Read-only] Length of system’s Authorization. Calculated based off of Authorization Date & Authorization Termination Date."
          example: 365
          minimum: 30
          maximum: 1825
        termsForAuth:
          type: string
          description: "[Read-only] Terms/Conditions for receiving and maintaining the system’s Authorization. Assigned by the Authorizing Official."
          x-faker: company.bs
          example: "Terms/Conditions to maintain a valid ATO"
        securityPlanApprovalStatus:
          type: string
          description: "[Read-only] Status of the approval of the system’s RMF Security Plan. Values include the following options (Approved, Denied, Not Yet Approved)."
          example: "Approved"
          enum: ["Approved", "Not Yet Approved", "Denied"]
        securityPlanApprovalDate:
          type: integer
          description: "[Read-only] Approval date of the system’s RMF Security Plan."
          example: 1638741660
          minimum: 1500000000
          maximum: 1900000000
        missionCriticality:
          type: string
          description: "[Read-only] Mission Criticality of the system record. Values include the following options (Mission Critical (MC), Mission Essential (ME), Mission Support (MS)."
          example: "Mission Support (MS)"
          enum: ["Mission Critical (MC)", "Mission Essential (ME)", "Mission Support (MS)"]
        geographicalAssociation:
          type: string
          description: "[Read-only] Geographical Association of the system record (VA only)."
          example: "VA Operated IS"
          enum: ["VA Operated IS", "non-VA Operated IS"]
        systemOwnership:
          type: string
          description: "[Read-only] Ownership of the system record (VA only)."
          example: "Region 1"
          enum: ["Region 1", "Region 2", "Region 3", "Region 4"]
        governingMissionArea:
          type: string
          description: "[Read-only] Governing Mission Area of the system record."
          example: "DoD portion of the Intelligence MA (DIMA)"
          enum: ["Business MA (BMA)", "DoD portion of the Intelligence MA (DIMA)", "Enterprise Information Environment MA (EIEMA)", "Warfighting MA (WMA)"]
        primaryFunctionalArea:
          type: string
          description: "[Read-only] Primary functional area of the system record."
          example: "Health/Medical"
          enum: ["Allies", "CBRNE", "Civilian Personnel & Readiness", "Command and Control", "Communications", "Communications Security (COMSEC)",
                "Economic", "Environmental Security", "Facilities", "Finance", "Health/Medical", "Human Resources", "Information Management",
                "Inspector General", "Intelligence", "Logistics", "Military Personnel and Readiness", "Nuclear", "Nuclear, Chemical, and Biological",
                "Operations", "Personnel and Readiness", "Procurement/Acquisition", "Reserve Components", "Scientific and Engineering", "Space and Weather",
                "Test and Evaluation", "Trainers", "Weapons", "Legal", "Transportation", "Not Applicable (N/A)", "Integration and Testing"]
        secondaryFunctionalArea:
          type: string
          description:  "[Read-only] Secondary functional area of the system record."
          example: "Logistics"
          enum: ["Allies", "CBRNE", "Civilian Personnel & Readiness", "Command and Control", "Communications", "Communications Security (COMSEC)",
                "Economic", "Environmental Security", "Facilities", "Finance", "Health/Medical", "Human Resources", "Information Management",
                "Inspector General", "Intelligence", "Logistics", "Military Personnel and Readiness", "Nuclear", "Nuclear, Chemical, and Biological",
                "Operations", "Personnel and Readiness", "Procurement/Acquisition", "Reserve Components", "Scientific and Engineering", "Space and Weather",
                "Test and Evaluation", "Trainers", "Weapons", "Legal", "Transportation", "Not Applicable (N/A)", "Integration and Testing"]
        primaryControlSet:
          type: string
          description: "[Read-only] Primary Control Set of the system record. RMF values include the following options (NIST SP 800-53 Revision 4), DIACAP values include the following options (DoDI 8500.2)"
          example: "NIST SP 800-53 Revision 4"
          enum: ["NIST SP 800-53 Revision 4", "DoDI 8500.2"]
        confidentiality:
          type: string
          description: "[Read-only] Confidentiality of the system record. RMF values include the following options (High, Moderate, Low)"
          example: "Low"
          enum: ["High", "Moderate", "Low"]
        integrity:
          type: string
          description: "[Read-only] Integrity of the system record. RMF values include the following options (High, Moderate, Low)"
          example: "Moderate"
          enum: ["High", "Moderate", "Low"]
        availability:
          type: string
          description: "[Read-only] Availability of the system record. RMF values include the following options (High, Moderate, Low)"
          example: "High"
          enum: ["High", "Moderate", "Low"]
        appliedOverlays:
          type: string
          description: "[Read-only] Overlays applied to the system record."
          example: "Classified Information"
          enum: ["Classified Information", "Privacy", "Cross Domain Solution (CDS)", "Financial Management",
                  "Intelligence", "Nuclear Command, Communication, Control Systems (NC3)", "Cloud Service Provider (CSP)"]
        rmfActivity:
          type: string
          description: "[Read-only] RMF Activity of the system record."
          example: "Maintain ATO and conduct reviews"
          enum: ["Initiate and plan C&A", "Initiate and plan cybersecurity Assessment Authorization", 
                 "Implement and validate assigned security controls", "Make assessment determination and authorization decision",
                 "Maintain ATO and conduct reviews", "Decommission"]
        crossDomainTicket:
          type: string
          description: "[Read-only] Cross Domain Tickets of the system record."
          x-faker: random.words
          example: "Cross Domain Ticket test"
        ditprDonId:
          type: string
          description: "[Read-Only] DITPR-DON identifier of the system record."
          x-faker: random.alphaNumeric
          example: "5910, 1234, 8765"
        mac:
          type: string
          description: "[Read-Only] MAC level of the system record."
          example: "II"
          enum: [ "I", "II", "III"]
        dodConfidentiality:
          type: string
          description: "[Read-Only] DoD Confidentiality level of the system record."
          example: "Public"
          enum: ["Public", "Sensitive", "Classified"]
        contingencyPlanTested:
          type: boolean
          description: "[Read-only] Has the system record’s Contingency Plan been tested?"
          x-faker: random.boolean
          example: true
        contingencyPlanTestDate:
          type: integer
          description: "[Read-only] Date the system record’s Contingency Plan was tested."
          example: 1426957321
          minimum: 1500000000
          maximum: 1900000000
        securityReviewDate:
          type: integer
          description: "[Read-only] Date the system record’s Annual Security Review was conducted."
          example: 1531958400
          minimum: 1500000000
          maximum: 1900000000
        hasOpenPoamItem:
          type: boolean
          description: "[Read-Only] Does the system record have an Ongoing or Risk Accepted POA&M Item?"
          x-faker: random.boolean
          example: true     
        hasOpenPoamItem90to120PastScheduledCompletionDate:
          type: boolean
          description: "[Read-Only] Does the system record have an Ongoing or Risk Accepted POA&M Item 90 to 120 days past its Scheduled Completion Date?"
          x-faker: random.boolean
          example: false                 
        hasOpenPoamItem120PlusPastScheudledCompletionDate:
          type: boolean
          description: "[Read-Only] Does the system record have an Ongoing or Risk Accepted POA&M Item 120 days past its Scheduled Completion Date?"
          x-faker: random.boolean
          example: false          
        impact:
          type: string
          description: "[Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)"
          example: "Low"
          enum: ["low", "Moderate", "High"]
        hasCUI:
          type: boolean
          description: "[Read-only] Does the system record contain and/or process Controlled Unclassified information?"
          x-faker: random.boolean
          example: false  
        hasPII:
          type: boolean
          description: "[Read-only] Does the system record contain and/or process Personally Identifiable Information?"
          x-faker: random.boolean
          example: false
        hasPHI:
          type: boolean
          description: "[Read-only] Does the system record contain and/or process Personal Health Information?"
          x-faker: random.boolean
          example: false
        ppsmRegistryNumber:
          type: string
          description: "[Read-only] Unique identifier for the DoD’s Ports, Protocols, and Services Management Registry system."
          x-faker: random.words
          example: "Test PPSM Registry Number"        
        interconnectedInformationSystemAndIdentifiers:
          type: string
          description: "[Read-only] Identify the interconnected information systems and corresponding identifiers within control CA-3."
          x-faker: random.word
          example: "Test"    
        isPiaRequired:
          type: boolean
          description: "[Read-only] Does the system require a Privacy Impact Assessment?"
          x-faker: random.boolean
          example: true
        piaStatus:
          type: string
          description: "[Read-only] Status of the PIA, availability values include the following options (Not Started, In Progress, Completed)"
          example: "Not Started"
          enum: ["Not Started", "In Progress", "Completed"]
        piaDate:
          type: integer
          description: "[Read-only] Date in which the system’s PIA took place."
          example: 1622048629
          minimum: 1500000000
          maximum: 1900000000
        userDefinedField1:
          type: string
          description: "[Read-only] User-defined field to augment Ad Hoc Reporting."
          x-faker: random.words
          example: "Test User-defined Field 1"
        userDefinedField2:
          type: string
          description: "[Read-only] User-defined field to augment Ad Hoc Reporting."
          x-faker: random.words
          example: "Test User-defined Field 2"
        userDefinedField3:
          type: string
          description: "[Read-only] User-defined field to augment Ad Hoc Reporting."
          x-faker: random.words
          example: "Test User-defined Field 3"          
        userDefinedField4:
          type: string
          description: "[Read-only] User-defined field to augment Ad Hoc Reporting."
          x-faker: random.words
          example: "Test User-defined Field 4"
        userDefinedField5:
          type: string
          description: "[Read-only] User-defined field to augment Ad Hoc Reporting."
          x-faker: random.words
          example: "Test User-defined Field 5"
        currentRmfLifecycleStep:
          type: string
          description: "[Read-only] Displays the system’s current step within the RMF Lifecycle."
          example: "4 – Assess"
          enum: ["1 – Categorize", "2 – Select", "3 – Implement", "4 – Assess", "5 – Authorize", "6 – Monitor"]
        otherInformation:
          type: string
          description: "[Read-only] Include any additional information required by the organization."
          x-faker: random.words
          example: "Additional Comments"
        reportsForScorecard:
          type: boolean
          description: "[Read-only] Indicates if the system reports to the DoD Cyber Hygiene Scorecard."
          x-faker: random.boolean
          example: true   
        package:
          type: array
          maxItems: 1
          items:
            $ref: "#/components/schemas/PacGet"   
        connectivityCcsd:
          type: array
          maxItems: 2
          items:
            $ref: "#/components/schemas/ConnectivityCcsd"
    ConnectivityCcsd:
      title: System CCSD Connectivity
      type: object
      additionalProperties: false
      properties:
        ccsdNumber:
          type: string
          description: "[Read-Only] Identifier for specific connections to the system."
          x-faker: random.word
          example: "CCSD Number"
        connectivity:
          type: string
          description: "[Read-Only] Choose connection type for the system."
          x-faker: random.word
          example: "Test Connectivity"          
    RoleCategory:
      title: System Roles Gategories
      type: object
      additionalProperties: false
      properties:
        systemId:
          type: integer
          format: int64
          description: "[Read-only] Unique system record identifier."
          example: 35
          minimum: 1
          maximum: 3000
        systemName:
          type: string
          description: "[Read-only] Name of the system record."
          example: "Test system 1"
          enum: ["Test system 1", "Test system 2", "Test system 3", "Test system 4"]
        systemAcronym:
          type: string
          pattern: '^[A-Z0-9-]{3,6}'
          description: "[Read-only] Acronym of the system record."
          example: "S-XYZ"
        roles:
          type: array
          maxItems: 1
          items:
            $ref: "#/components/schemas/Roles"
    Roles:
      title: System Role
      type: object
      additionalProperties: false
      properties:
        roleCategory:
          type: string
          description: "[Required] System role categories"
          example: "PAC"
          enum: ["CAC","PAC","Other"]
        role:
          type: string
          description: "[Required] System role description"
          example: "AO"
          enum: ["PM/IAM", "SCA", "AO", "ISSO", "IAO", "Validator (IV&V)", "User Rep (View Only)", "Auditor", "Artifact Manager","C&A Team"]
        users:
          type: array
          maxItems: 1
          items:
            $ref: "#/components/schemas/Users"
    Users:
      title: System role users
      type: object
      additionalProperties: false
      properties:
        firstName:
          type: string
          x-faker: name.firstName
          example: "John"
        lastName:
          type: string
          x-faker: name.lastName
          example: "Smith"
        email:
          type: string
          format: email
          x-faker: internet.email
          example: "John.Smith@hb.com"
    ControlsGet:
      title: Controls - server returned data from the GET call
      type: object
      additionalProperties: false
      properties:
        systemId:
          type: integer
          format: int64
          description: "[Required] Unique system record identifier."
          example: 35
          minimum: 1
          maximum: 3000
        name:
          type: string
          description: "[Read-only] Name of the system record."
          x-faker: random.word
          example: "System XYZ"
        acronym:
          type: string
          pattern: '^[A-Z0-9-]{3,6}'
          description: "[Required] Acronym of the system record."
          example: "AC-3"
        ccis:
          type: string
          pattern: '^\d{5,6},\d{5,6}'
          description: "[Read-only] Comma separated list of CCIs associated with the control."
          example: "000001,000002"
        isInherited:
          type: boolean
          description: "[Read-only] Indicates whether a control is inherited."
          x-faker: random.boolean
          example: true
        modifiedByOverlays:
          type: string
          description: "[Read-only] List of overlays that affect the control."
          example: "Requirements"
          enum: ["Privacy", "Requirements", "Concurrency"]
        includedStatus:
          type: string
          description: "[Read-only] Indicates the manner by which a control was included in the system’s categorization."
          example: "Manually"
        complianceStatus:
          type: string
          description: "[Read-only] Compliance of the control."
          x-faker: random.word
          example: "Status"
        responsibleEntities:
          type: string
          description: "[Required] Include written description of Responsible Entities that are responsible for the Security Control. Character Limit = 2,000."
          example: "Unknown"
        implementationStatus:
          type: string
          description: "[Optional] Implementation Status of the Security Control for the information system."
          example: "Planned"
          enum: ["Planned", "Implemented", "Inherited", "Not Applicable", "Manually Inherited"]
        commonControlProvider:
          type: string
          description: "[Conditional] Indicate the type of Common Control Provider for an “Inherited” Security Control."
          example: "DoD"
          enum: ["DoD", "Component", "Enclave"]
        naJustification:
          type: string
          description: "[Conditional] Provide justification for Security Controls deemed Not Applicable to the system."
          example: "System EOL within 120 days"
        controlDesignation:
          type: string
          description: "[Required] Control designations"
          example: "Common"
          enum: ["Common", "System-Specific", "Hybrid"]
        estimatedCompletionDate:
          type: integer
          description: "[Required] Field is required for Implementation Plan."
          example: 1638741660
          minimum: 1500000000
          maximum: 1900000000
        implementationNarrative:
          type: string
          description: "[Required] Includes security control comments. Character Limit = 2,000."
          x-faker: random.words
          example: "Test Imp. Narrative"
        slcmCriticality:
          type: string
          description: "[Conditional] Criticality of Security Control regarding SLCM. Character Limit = 2,000."
          x-faker: random.word
          example: "Test Criticality"
        slcmFrequency:
          type: string
          description: "[Conditional] SLCM frequency"
          example: "Annually"
          enum: ["Constantly", "Daily", "Weekly", "Monthly", "Quarterly", "Semi-Annually", "Annually", "Every Two Years", "Every Three Years", "Undetermined"]
        slcmMethod:
          type: string
          description: "[Conditional] SLCM method utilized"
          example: "Automated"
          enum: ["Automated", "Semi-Automated", "Manual", "Undetermined"]
        slcmReporting:
          type: string
          description: "[Conditional] Method for reporting Security Control for SLCM. Character Limit = 2,000."
          x-faker: random.word
          example: "Test Reporting"
        slcmTracking:
          type: string
          description: "[Conditional] How Non-Compliant Security Controls will be tracked for SLCM. Character Limit = 2,000."
          x-faker: random.word
          example: "Test Tracking"
        slcmComments:
          type: string
          description: "[Conditional] Additional comments for Security Control regarding SLCM. Character Limit = 4,000."
          x-faker: random.word
          example: "Test SLCM Comments"
        severity:
          type: string
          description: "[Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)"
          example: "Low"
          enum: ["Very Low", "Low", "Moderate", "High", "Very High"]
        vulnerabiltySummary:
          type: string
          description: "[Optional] Include vulnerability summary. Character Limit = 2,000."
          x-faker: random.words
          example: "Test Vulnerability Summary"
        recommendations:
          type: string
          description: "[Optional] Include recommendations. Character Limit = 2,000."
          x-faker: random.words
          example: "Test Recommendations"
        relevanceOfThreat:
          type: string
          description: "[Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)"
          example: "Low"
          enum: ["Very Low", "Low", "Moderate", "High", "Very High"]
        likelihood:
          type: string
          description: "[Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)"
          example: "Low"
          enum: ["Very Low", "Low", "Moderate", "High", "Very High"]
        impact:
          type: string
          description: "[Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)"
          example: "Low"
          enum: ["Very Low", "Low", "Moderate", "High", "Very High"]
        impactDescription:
          type: string
          description: "[Optional] Include description of Security Control’s impact."
          x-faker: random.words
          example: "Impact text"
        residualRiskLevel:
          type: string
          description: "[Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)"
          example: "Low"
          enum: ["Very Low", "Low", "Moderate", "High", "Very High"]
        testMethod:
          type: string
          description: "[Optional] Identifies the assessment method / combination that will determine if the security requirements are implemented correctly."
          example: "Test"
          enum: ['Test', 'Interview', 'Examine', 'Test, Interview', 'Test, Examine', 'Interview, Examine','Test, Interview, Examine']
    ControlsPut:
      title: Controls - return query from the server for the PUT call
      type: object
      additionalProperties: false
      properties:
        acronym:
          type: string
          pattern: '^[A-Z0-9-]{3,6}'
          description: "Acronym of the system record."
          example: "AC-3"
        success:
          type: boolean
          description: "Indicates if operations result (success/fail)"
          x-faker: random.boolean
          example: true
        systemId:
          type: integer
          format: int64
          description: "The system identifier for the system being updated."
          example: 33
          minimum: 10
          maximum: 3000
    TestResultsGet:
      title: Test Results - server returned data from the GET call
      type: object
      additionalProperties: false
      properties:
        systemId:
          type: integer
          format: int64
          description: "[Required] Unique eMASS identifier. Will need to provide correct number"
          example: 35
          minimum: 1
          maximum: 3000
        control:
          type: string
          description: "[Read-Only] Control acronym associated with the test result. NIST SP 800-53 Revision 4 defined."
          x-faker: finance.bic
          example: “AC-3”
        cci:
          type: string
          pattern: '^\d{5,6},\d{5,6}'
          description: "[Required] CCI associated with test result."
          example: "000001"
        isInherited:
          type: boolean
          description: "[Read-only] Indicates whether a test result is inherited."
          x-faker: random.boolean
          example: true
        testedBy:
          type: string
          description: "[Required] Last Name, First Name. 100 Characters."
          x-faker: name.findName
          example: "Smith, Joe"
        testDate:
          type: integer
          format: int64
          description: "[Required] Unix time format."
          example: 1638741660
          minimum: 1500000000
          maximum: 1900000000
        description:
          type: string
          description: "[Required] Include description of test result. 4000 Characters."
          x-faker: random.words
          example: "Test result description"
        type:
          type: string
          description: "[Read-Only] Indicates the location in the Control Approval Chain when the test result is submitted."
          example: "Self-Assessment"
          enum: ["Self-Assessment", "Schedule-Assessment", "Deep Evaluation"]
        complianceStatus:
          type: string
          description: "[Required] Test result compliance status"
          example: "Compliant"
          enum: ["Compliant", "Non-Compliant", "Not Applicable"]
    TestResultsPost:
      title: Test Results - return query from the server for the POST call
      type: object
      additionalProperties: false
      properties:
        cci:
          type: string
          pattern: '^\d{5,6},\d{5,6}'
          description: "CCI associated with test result."
          example: "000001"
        success:
          type: boolean
          description: "Indicates if operations result (success/fail)"
          x-faker: random.boolean
          example: true
        systemId:
          type: integer
          format: int64
          description: "The system identifier for the system being updated."
          example: 35
          minimum: 10
          maximum: 3000
    PoamGet:
      title: POAM - return query from the server for the GET call
      type: object
      additionalProperties: false
      properties:
        systemId:
          type: integer
          format: int64
          description: "[Required] Unique eMASS system identifier."
          example: 830
          minimum: 1
          maximum: 3000
        poamId:
          type: integer
          format: int64
          description: "[Required] Unique item identifier"
          example: 45
          minimum: 1
          maximum: 300
        displayPoamId:
          type: integer
          format: int64
          description: "[Required] Globally unique identifier for individual POA&M Items, seen on the front-end as “ID”."
          example: 450000000
          minimum: 100000000
          maximum: 101003239
        isInherited:
          type: boolean
          description: "[Read-only] Indicates whether a test result is inherited."
          x-faker: random.boolean
          example: true
        externalUid:
          type: string
          description: "[Optional] Unique identifier external to the eMASS application for use with associating POA&Ms. 100 Characters."
          x-faker: random.uuid
          example: "d6d98b88-c866-4496-9bd4-de7ba48d0f52"
        controlAcronyms:
          type: string
          description: "[Optional] System acronym name."
          x-faker: finance.bic
          example: “AC-3”
        cci:
          type: string
          pattern: '^\d{5,6},\d{5,6}'
          description: "[Optional] CCI associated with POA&M Item.."
          example: "000001"
        status:
          type: string
          description: "[Required] Values include the following: (Ongoing,Risk Accepted,Completed,Not Applicable"
          example: "Completed"
          enum: ["Ongoing", "Risk Accepted", "Completed", "Not Applicable"]
        reviewStatus:
          type: string
          description: "[Read-Only] Values include the following options: (Not Approved,Under Review,Approved)"
          example: "Under Review"
          enum: ["Not Approved", "Under Review", "Approved"]
        vulnerabilityDescription:
          type: string
          description: "[Required] Provide a description of the POA&M Item. 2000 Characters."
          x-faker: random.words
          example: "Description text"    
        sourceIdentVuln:
          type: string
          description: "[Required] Include Source Identifying Vulnerability text. 2000 Characters."
          x-faker: random.words
          example: "Source Indentifying Vulnerability text"        
        securityChecks:
          type: string
          description: "[Optional] Security Checks that are associated with the POA&M."
          x-faker: random.words
          example: "SV-25123r1_rule,2016-A-0279"
        milestones:
          type: array
          maxItems: 3
          items:
            $ref: "#/components/schemas/MilestonesGet"
        pocOrganization:
          type: string
          description: "[Required] Organization/Office represented. 100 Characters."
          x-faker: company.companyName
          example: "Army"
        pocFirstName:
          type: string
          description: "[Conditional] First name of POC. 100 Characters."
          x-faker: name.firstName
          example: "John"
        pocLastName:
          type: string
          description: "[Conditional] Last name of POC. 100 Characters."
          x-faker: name.lastName
          example: "Smith"
        pocEmail:
          type: string
          description: "[Conditional] Email address of POC. 100 Characters."
          x-faker: internet.email
          example: "smith@ah.com"
        pocPhoneNumber:
          type: string
          description: "[Conditional] Phone number of POC (area code) ***-**** format. 100 Characters."
          x-faker: phone.phoneNumber.email
          example: "555-555-5555"
        severity:
          type: string
          description: "[Conditional] Required for approved items. Values include the following options (Very Low,Low,Moderate,High,Very High)"
          example: "Low"
          enum: ["Very Low", "Low", "Moderate", "High", "Very High"]
        rawSeverity:
          type: string
          description: "[Optional] Values include the following options (I,II,III)"
          example: "I"
          enum: ["I", "II", "III"]
        relevanceOfThreat:
          type: string
          description: "[Optional] Values include the following options: (Very Low,Low,Moderate,High,Very High)"
          example: "Low"
          enum: ["Very Low", "Low", "Moderate", "High", "Very High"]
        likelihood:
          type: string
          description: "[Optional] Values include the following options: (Very Low,Low,Moderate,High,Very High)"
          example: "Moderate"
          enum: ["Very Low", "Low", "Moderate", "High", "Very High"]
        impact:
          type: string
          description: "[Optional] Values include the following options: (Very Low,Low,Moderate,High,Very High)"
          example: "High"
          enum: ["Very Low", "Low", "Moderate", "High", "Very High"]
        impactDescription:
          type: string
          description: "[Optional] Include description of Security Control’s impact."
          x-faker: random.words
          example: "Impact Description text"
        residualRiskLevel:
          type: string
          description: "[Optional] Values include the following options: (Very Low,Low,Moderate,High,Very High)"
          example: "Very Low"
          enum: ["Very Low", "Low", "Moderate", "High", "Very High"]
        recommendations:
          type: string
          description: "[Optional] Include recommendations. Character Limit = 2,000."
          x-faker: random.words
          example: "Recommendations text"
        resources:
          type: string
          description: "[Required] List of resources used. 250 Characters."
          x-faker: random.words
          example: "Resource text."
        scheduledCompletionDate:
          type: integer
          format: int64
          description: "[Conditional] Required for ongoing and completed POA&M items. Unix time format."
          example: 1599644800
          minimum: 1500000000
          maximum: 1900000000
        completionDate:
          type: integer
          format: int64
          description: "[Conditional] Field is required for completed POA&M items. Unix time format."
          example: 1505916276
          minimum: 1500000000
          maximum: 1900000000
        extensionDate:
          type: integer
          format: int64
          description: >
            [Read-Only] Value returned for a POA&M Item with review status
            Approved” and has a milestone with a scheduled completion date
            that extends beyond the POA&M Item’s scheduled completion date.
          example: 1505916298
          minimum: 1500000000
          maximum: 1900000000
        comments:
          type: string
          description: "[Conditional] Field is required for completed and risk accepted POA&M items. 2000 Characters"
          x-faker: random.words
          example: "Comments text."
        mitigation:
          type: string
          description: "[Optional] Include mitigation explanation. 2000 Characters."
          x-faker: random.words
          example: "Mitigation text"
        isActive:
          type: boolean
          description: "[Conditional] Optionally used in PUT to delete milestones when updating a POA&M."
          x-faker: random.boolean
          example: true       
    PoamPost:
      title: POAM - return query from the server for the POST call
      type: object
      additionalProperties: false
      "$ref": "#/components/schemas/PoamPostPutDel"
    PoamPut:
      title: POAM - return query from the server for the PUT call
      type: object
      additionalProperties: false
      "$ref": "#/components/schemas/PoamPostPutDel"
    PoamDelete:
      title: POAM - return query from the server for the DELETE call
      type: object
      additionalProperties: false
      "$ref": "#/components/schemas/PoamPostPutDel"
    PoamPostPutDel:
      type: object
      additionalProperties: false
      properties:
        systemId:
          type: integer
          format: int64
          description: "The system identifier for the system being updated."
          example: 33
          minimum: 10
          maximum: 3000        
        poamId:
          type: integer
          format: int64
          description: "The newly created POAM identifier"
          example: 45
          minimum: 1
          maximum: 300              
        externalUid:
          type: string
          description: "The unique identifier external to the eMASS application for use with associating POA&Ms. 100 Characters."
          x-faker: random.uuid
          example: "d6d98b88-c866-4496-9bd4-de7ba48d0f52"
        success:
          type: boolean
          description: "Indicates if operations result (success/fail)"
          x-faker: random.boolean
          example: true      
    MilestonesGet:
      title: Milestones - return query from the server for the GET call
      type: object
      additionalProperties: false
      properties:
        systemId:
          type: integer
          format: int64
          description: "[Required] Unique eMASS system identifier."
          example: 830
          minimum: 1
          maximum: 3000
        milestoneId:
          type: integer
          format: int64
          description: "[Required] Unique item identifier"
          example: 19
          minimum: 1
          maximum: 300
        poamId:
          type: integer
          format: int64
          description: "[Required] Unique item identifier"
          example: 45
          minimum: 1
          maximum: 300
        description:
          type: string
          description: "[Required] Include milestone description."
          x-faker: random.words
          example: "Description text"
        scheduledCompletionDate:
          type: integer
          format: int64
          description: "[Required] Required for ongoing and completed POA&M items. Unix time format."
          example: 1599644800
          minimum: 1500000000
          maximum: 1900000000
        reviewStatus:
          type: string
          description: "[Read-Only] Values include the following options: (Not Approved,Under Review,Approved)"
          example: "Under Review"
          enum: ["Not Approved", "Under Review", "Approved"]          
    MilestonesPost:
      title: Milestones - return query from the server for the POST call
      type: object
      additionalProperties: false
      "$ref": "#/components/schemas/MilestonesPutPostDelete"
    MilestonesPut:
      title: Milestones - return query from the server for the PUT call
      type: object
      additionalProperties: false
      "$ref": "#/components/schemas/MilestonesPutPostDelete"
    MilestonesDelete:
      title:  Milestones - return query from the server for the DELETE call
      type: object
      additionalProperties: false
      "$ref": "#/components/schemas/MilestonesPutPostDelete"
    MilestonesPutPostDelete:
      type: object
      additionalProperties: false
      properties:
        systemId:
          type: integer
          format: int64
          description: "The system identifier that the POAM was added."
          example: 35
          minimum: 10
          maximum: 3000
        poamId:
          type: integer
          format: int64
          description: "The newly created POAM identifier"
          example: 45
          minimum: 1
          maximum: 300
        milestoneId:
          type: integer
          format: int64
          description: "The Milestone unique item identifier"
          example: 77
          minimum: 1
          maximum: 300         
        externalUid:
          type: string
          description: "The unique identifier external to the eMASS application for use with associating POA&Ms. 100 Characters."
          x-faker: random.uuid
          example: "d6d98b88-c866-4496-9bd4-de7ba48d0f52"
        success:
          type: boolean
          description: "Indicates if operations result (success/fail)"
          x-faker: random.boolean
          example: true    
    ArtifactsGet:
      title: Artifacts - return query from the server for the GET call
      type: object
      additionalProperties: false
      properties:
        systemId:
          type: integer
          format: int64
          description: "[Required] Unique eMASS system identifier."
          example: 35
          minimum: 1
          maximum: 3000
        filename:
          type: string
          description: "[Required] File name should match exactly one file within the provided zip file. 1000 Characters."
          x-faker: system.commonFileName
          example: "AutorizationGuidance.pdf"
        isInherited:
          type: boolean
          description: "[Read-only] Indicates whether an artifact is inherited."
          x-faker: random.boolean
          example: true
        isTemplate:
          type: boolean
          description: "[Read-only] Indicates whether an artifact template."
          x-faker: random.boolean
          example: false
        type:
          type: string
          description: "[Required] Artifact type options"
          example: "Policy"
          enum: ["Procedure", "Diagram", "Policy", "Labor", "Document", "Image", "Other", "Scan Result", "Auditor Report"]          
        category:
          type: string
          description: "[Required] Artifact category options"
          example: "Change Request"
          enum: ["Implementation Guidance", "Evidence"]
        description:
          type: string
          description: "[Optional] Artifact description. 2000 Characters."
          x-faker: random.words
          example: "Artifact description text"
        refPageNumber:
          type: string
          description: "[Optional] Artifact reference page number. 50 Characters."
          x-faker: random.words
          example: "Reference page number"
        ccis:
          type: string
          pattern: '^\d{5,6},\d{5,6}'
          description: "[Optional] CCI associated with test result."
          example: "000001,000002"
        controls:
          type: string
          pattern: '^[A-Z0-9-]{3,6}'
          description: "[Optional] Control acronym associated with the artifact. NIST SP 800-53 Revision 4 defined."
          example: "AC-8,AC-2(4)"
        mimeContentType:
          type: string
          description: "[Read-Only] Standard MIME content type derived from file extension."
          x-faker: system.mimeType
          example: "application/zip"
        fileSize:
          type: string
          description: "[Read-Only] File size of attached artifact."
          x-faker: random.number
          example: "4MB"
        artifactExpirationDate:
          type: integer
          format: int64
          description: "[Optional] Date Artifact expires and requires review. In Unix Date format."
          example: 1549036926
          minimum: 1500000000
          maximum: 1900000000
        lastReviewedDate:
          type: integer
          format: int64
          description: "[Conditional] Date Artifact was last reviewed.. Unix time format."
          example: 1549036928
          minimum: 1500000000
          maximum: 1900000000
    ArtifactsDelete:
      title: Artifacts - return query from the server for the DELETE call
      type: array
      maxItems: 4
      items:
        type: object
        additionalProperties: false
        properties:
          filename:
            type: string
            description: "[Required] File name should match exactly one file within the provided zip file. 1000 Characters."
            x-faker: system.commonFileName
            example: "AutorizationGuidance.pdf"
    CacGet:
      title: CAC - return query from the server for the GET call
      type: object
      additionalProperties: false
      properties:
        systemId:
          type: integer
          format: int64
          description: "[Required] Unique eMASS system identifier."
          example: 35
          minimum: 1
          maximum: 3000      
        controlAcronym:
          type: string
          pattern: '^[A-Z0-9-]{3,6}'
          description: "[Required] System acronym name."
          example: "AC-3"
        complianceStatus:
          type: string
          description: "[Read-only] Compliance status of the control."
          example: "Compliant"
          enum: ["Compliant", "Not Compliant", "No Status", "Not Applicable"]
        currentStageName:
          type: string
          description: "[Read-Only] Role in current stage."
          x-faker: random.word
          example: "SCA-V"
        currentStage:
          type: integer
          description: "[Read-Only] Current step in the Control Approval Chain."
          example: 2
          minimum: 1
          maximum: 20
        totalStages:
          type: integer
          description: "[Read-Only] Total number of steps in Control Approval Chain."
          example: 2
          minimum: 1
          maximum: 10
        comments:
          type: string
          description: "[Conditional] Control Approval Chain comments - 2000 Characters."
          x-faker: random.words
          example: "Control Approval Chain comments text."
    PacGet:
      title: PAC - return query from the server for the GET call
      type: object
      properties:
        systemId:
          type: integer
          format: int64
          description: "[Required] Unique eMASS system identifier."
          example: 35
          minimum: 1
          maximum: 3000        
        workflow:
          type: string
          description: "[Required] Values include the following:(Assess and Authorize, Assess Only, Security Plan Approval)"
          example: "Assess and Authorize"
          enum: ["Assess and Authorize", "Assess Only", "Security Plan Approval"]
        name:
          type: string
          description: "[Required] Package name. 100 Characters."
          x-faker: random.word
          example: "Package name text"
        currentStageName:
          type: string
          description: "[Read-Only] Name of the current stage in the active workflow."
          x-faker: random.word
          example: "SCA-R"
        currentStage:
          type: integer
          description: "[Read-Only] Number of the current stage in the active workflow."
          example: 4
          minimum: 2
          maximum: 20
        totalStages:
          type: integer
          description: "[Read-Only] Total number of stages in the active workflow."
          example: 6
          minimum: 2
          maximum: 25
        daysAtCurrentStage:
          type: integer
          description: "[Read-Only] Indicates the number of days at current workflow stage."
          example: 2
          minimum: 1
          maximum: 30
        comments:
          type: string
          description: "[Required] Comments related to package approval chain. Character Limit = 4,000."
          x-faker: random.words
          example: "Comments text."
    PacPost:
      title: PAC - return query from the server for the POST call
      type: object
      properties:
        workflow:
          type: string
          description: "[Required] Values include the following:(Assess and Authorize, Assess Only, Security Plan Approval)"
          example: "Assess and Authorize"
          enum: ["Assess and Authorize", "Assess Only", "Security Plan Approval"]
        success:
          type: boolean
          x-faker: random.boolean
          example: true
        systemId:
          type: integer
          format: int64
          example: 35
          minimum: 1
          maximum: 3000    
    CmmcGet:
      title: CMMC - return query from the server for the GET call
      type: object
      additionalProperties: false
      properties:    
        operation:
          type: string
          description: "[Read-Only] Indicates the action that should be taken on the assessment record since the provided sinceDate."
          example: "UPDATED"
          enum: ["ADDED", "UPDATED", "DELETED"]
        hqOrganizationName:
          type: string
          description: "[Read-Only] The name of the DIB Company."
          x-faker: company.companyName
          example: "Army"
        duns:
          type: string
          description: "[Read-Only] The Data Universal Numbering System (DUNS) number."
          x-faker: finance.account
          example: "852159753"
        uniqueEntityIdentifier:
          type: string
          description: "[Read-Only] The Unique Entity Identifier assigned to the DIB Company."
          x-faker: finance.account
          example: "9809123"
        cageCodes:
          type: string
          description: "[Read-Only] The five position code(s) associated with the Organization Seeking Certification (OSC)."
          example: "89ED9; 99D8B"
          enum: ["89ED9; 99D8B", "34TH5; 23YH6", "75F8H; 2GH5I", "45RF9", "58H9L; 45UH8; 75F8H; 2GH5I"]
        oscName:
          type: string
          description: "[Read-Only] The name of the Organization Seeking Certification."
          x-faker: company.companyName
          example: "UC Labs"
        scope:
          type: string
          description: "[Read-Only] The scope of the OSC assessment."
          example: "Enterprise"
          enum: ["Enterprise", "Non-Enterprise"]
        scopeDescription:
          type: string
          description: "[Read-Only] Brief description of the scope of the OSC assessment"
          x-faker: random.words
          example: "Assessment of UC's Lab"
        awardedCMMCLevel:
          type: string
          description: "[Read-Only] The CMMC award level."
          example: "Not Certified"
          enum: ["Not Certified", "Level 1", "Level 2", "Level 3", "Level 4", "Level 5"]
        expirationDate:
          type: integer
          format: int64
          description: "[Read-Only] Expiration date of the awarded CMMC certification."
          example: 1638741660
          minimum: 1500000000
          maximum: 1900000000
        certificateId:
          type: string
          description: "[Read-Only] Unique identifier for the assessment/certificate."
          x-faker: random.uuid
          example: "41b89528-a7a8-470a-90f4-c3fd1267d6f7"
        modelVersion:
          type: string
          description: "[Read-Only] Version of the CMMC Model used as part of the assessment."
          x-faker: system.semver
          example: "1.12"
        ssps:
          maxItems: 4
          type: array
          items:
            $ref: '#/components/schemas/Ssps'
    Ssps:
      title: System Role
      type: object
      additionalProperties: false
      properties:
        sspName:
          type: string
          description: "[Read-Only] Name of the System Security Plan."
          x-faker: company.companyName
          example: "UC Lab"
        sspVersion:
          type: string
          description: "[Read-Only] Version of the System Security Plan."
          x-faker: system.semver
          example: "4.3.0"
        sspDate:
          type: integer
          format: int64
          description: "Date of the System Security Plan. Unix date format."
          example: 1638741660
          minimum: 1500000000
          maximum: 1900000000
    WorkflowDefinitionGet:
      title: Workflow Definition - return query from the server for the GET call
      type: object
      properties:    
        description:
          type: string
          description: "[Read-Only] Description of the workflow or the stage transition. For stage transitions, this matches the action dropdown that appears for PAC users."
          x-faker: lorem.sentence 
          example: "The workflow description"
        isActive:
          type: boolean
          description: "[Read-Only] Returns true if the workflow is available to the site."
          x-faker: random.boolean
          example: false
        version:
          type: string
          description: "[Read-Only] Version of the workflow definition."
          x-faker: system.semver
          example: "4"
        workflow:
          type: string
          description: "[Read-Only] The workflow type."
          example: "RMF Step 1: Security Category"
          enum: ["RMF Step 1: Security Category", "RMF Step 2: Security Category", "RMF Step 3: Security Category"]
        stages:
          maxItems: 2
          type: array
          items:
            $ref: '#/components/schemas/Stage'
    Stage:
      title: Workflow Definition Stage
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
          description: "[Read-Only] Name of the stage."
          example: "Not Started"
          enum: ["Not Started","Categorize System","Submit Categorization","Approval","Complete"]
        transitions:
          maxItems: 4
          type: array
          items:
            $ref: '#/components/schemas/DefinitionTransitions'
    DefinitionTransitions:
      title: Workflow Definition Transition
      type: object
      additionalProperties: false
      properties:
        endStage:
          type: string
          description: "[Read-Only] The landing stage that is active after performing a transition."
          example: "Submit Categorization"
          enum: ["Categorize System","Submit Categorization","Cancelled","Cancel","Complete"]
        description:  
          type: string
          description: "[Read-Only] Description of the workflow or the stage transition. For stage transitions, this matches the action dropdown that appears for PAC users."
          example: "Initiate Workflow"
          enum: ["Initiate Workflow","Approve","Disapprove and Move Forward","Cancel","Deny"]
        roles:
          type: array
          items:
            type: string
            example: ["PM/ISO", "System Admin", "eMASS System Admin", "ISSE", "ISSM", "IO"]
            enum: ["PM/ISO", "System Admin", "eMASS System Admin", "ISSE", "ISSM", "IO","Other","Unknown"]
          minItems: 1
          maxItems: 6
    WorkflowInstancesGet: 
      title: Workflow Instances - return query from the server for the GET call
      type: object
      properties:
        createdDate:
          type: integer
          format: int64
          description: "[Read-Only] Date the workflow instance or the workflow transition was created."
          example: 1636124623
          minimum: 1500000000
          maximum: 1900000000
        currentStage:
          type: string
          description: "[Read-Only] Name of the current stage."
          example: "Echelon II"
          enum: ["Echelon I","Echelon II","Echelon III","Categorize System","Submit Categorization","Approval","Cancel","Complete"]
        lastEditedBy:
          type: string
          description: "[Read-Only] User that last acted on the workflow."
          x-faker: internet.email
          example: "john.doe.ctr@mail.mil"
        lastEditedDate:
          type: integer
          format: int64
          description: "[Read-Only] Date the workflow was last acted on."
          example: 1631130837
          minimum: 1500000000
          maximum: 1900000000
        packageName:
          type: string
          description: "[Read-Only] The package name."
          x-faker:
          example: "Test RMF Step 1 package"
          enum: ["Test POA&M Approval","Test RMF Step 1 package","Test RMF Step 2 package","Test RMF Step 3 package"]
        systemName:
          type: string
          description: "[Read-Only] The system name."
          example: "Test system 1"
          enum: ["Test system 1", "Test system 2", "Test system 3", "Test system 4"]
        version:
          type: string
          description: "[Read-Only] Version of the workflow definition."
          x-faker: system.semver
          example: "4"
        workflow:
          type: string
          description: "[Read-Only] The workflow type."
          example: "RMF Step 1: Security Category"
          enum: ["POA&M Approval", "RMF Step 1: Security Category", "RMF Step 2: Security Category", "RMF Step 3: Security Category"]        
        workflowInstanceId:
          type: integer
          format: int64
          description: "[Read-Only] Unique workflow instance identifier."
          example: 35
          minimum: 10
          maximum: 3000
        transitions:
          maxItems: 4
          type: array
          items:
            $ref: '#/components/schemas/InstancesTransitions'          
    InstancesTransitions:
      title: Workflow Instances Transition
      type: object
      additionalProperties: false
      properties:
        comments: 
          type: string 
          description: "[Read-Only] Comments entered by the user when performing the transition."
          example: "Approved the categorization"
          enum: ["Approved the categorization","Submitted the categorization","Categorized the system as HMM","Selected POA&M Items"]
        createdBy:
          type: string
          description: "[Read-Only] User that performed the workflow transition."
          x-faker: internet.email
          example: "john.doe.ctr@mail.mil"
        createdDate:
          type: integer
          format: int64
          description: "[Read-Only] Date the workflow instance or the workflow transition was created."
          example: 1636124623
          minimum: 1500000000
          maximum: 1900000000
        description:  
          type: string
          description: "[Read-Only] Description of the stage transition. This matches the action dropdown that appears for PAC users."
          example: "Submit New Package"
          enum: ["Initiate Workflow","Approve","Submit New Package","Disapprove and Move Forward","Cancel","Deny"]
        endStage:
          type: string
          description: "[Read-Only] The landing stage that is active after performing a transition."
          example: "Submit Categorization"
          enum: ["PM/ISO","Echelon I","Echelon II","Echelon III", "Categorize System","Submit Categorization","Approval","Complete"]
        startStage:
          type: string
          description: "[Read-Only] The beginning stage that is active before performing a transition."
          example: "Not Started"
          enum: ["Not Started","PM/ISO","Categorize System","Submit Categorization","Approval","Deny"]   
  
    #----------------------------------------------------------------------------
    # 400 Responses
    #----------------------------------------------------------------------------
    400Response:
      type: object
      additionalProperties: false
      properties:
        meta:
          "$ref": "#/components/schemas/400"
    404Response:
      type: object
      additionalProperties: false
      properties:
        meta:
          "$ref": "#/components/schemas/404"
  
    #----------------------------------------------------------------------------
    # HTTP response status code values 
    #----------------------------------------------------------------------------
    "200":
      title: OK
      type: object
      additionalProperties: false
      properties:
        code:
          type: integer
          format: int32
          minimum: 200
          maximum: 200
          default: 200
    "201":
      title: "Created"
      type: object
      additionalProperties: false
      properties:
        meta:
          type: object
          properties:
            code:
              type: integer
              format: int32
              minimum: 201
              maximum: 201
              default: 201
            message:
              type: string
              default: "Request was fulfilled and resulted in on or more new resources being successfully created on the server."    
    "400":
      title: "Bad Request"
      type: object
      additionalProperties: false
      properties:
        meta:
          type: object
          properties:
            code:
              type: integer
              format: int32
              minimum: 400
              maximum: 400
              default: 400
            errorMessage:
              type: string
              default: "Request could not be understood by the server due to incorrect syntax or an unexpected format"          
    "401":
      title: "Unauthorized"
      type: object
      additionalProperties: false
      properties:
        meta:
          type: object
          properties:
            code:
              type: integer
              format: int32
              minimum: 401
              maximum: 401
              default: 401
            errorMessage:
              type: string
              default: "Request has failed to provide suitable authentication from the client"
    "403":
      title: "Forbidden"
      type: object
      additionalProperties: false
      properties:
        meta:
          type: object
          properties:
            code:
              type: integer
              format: int32
              minimum: 403
              maximum: 403
              default: 403
            errorMessage:
              type: string
              default: "Request was blocked by the application due to a lack of client permissions to the API or to a specific endpoint"
    "404":
      title: "Not Found"
      type: object
      additionalProperties: false
      properties:
        code:
          type: integer
          format: int32
          minimum: 404
          maximum: 404
          default: 404
        errorMessage:
          type: string
          default: "Request has failed because the URL provided in the request did not match any available endpoint locations"
    "405":
      title: "Method Not Allowed"
      type: object
      additionalProperties: false
      properties:
        meta:
          type: object
          properties:
            code:
              type: integer
              format: int32
              minimum: 405
              maximum: 405
              default: 405
            errorMessage:
              type: string
              default: "Request was made with a verb (GET, POST, etc.) that is not permitted for the endpoint"
    "411":
      title: "Length Required"
      type: object
      additionalProperties: false
      properties:
        meta:
          type: object
          properties:
            code:
              type: integer
              format: int32
              minimum: 411
              maximum: 411
              default: 411
            errorMessage:
              type: string
              default: "Request was of type POST and failed to provide the server information about the data/content length being submitted"              
    "490":
      title: "API Rule Failed"
      type: object
      additionalProperties: false
      properties:
        meta:
          type: object
          properties:
            code:
              type: integer
              format: int32
              minimum: 490
              maximum: 490
              default: 490
            errorMessage:
              type: string
              default: "Request has failed because too much data was requested in a single batch. This error is specific to eMASS"
    "500":
      title: "Internal Server Error"
      type: object
      additionalProperties: false
      properties:
        meta:
          type: object
          properties:
            code:
              type: integer
              format: int32
              minimum: 500
              maximum: 500
              default: 500
            errorMessage:
              type: string
              default: "Server encountered an unexpected condition which prevented it from fulfilling the request"

    #----------------------------------------------------------------------------  
    # Schema for error response body
    #----------------------------------------------------------------------------
    Error:
      title: "ResponseDefaultError"
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message      

  #----------------------------------------------------------------------------
  # Security schemes
  #----------------------------------------------------------------------------
  securitySchemes:
    apikey:
      type: apiKey
      #type: https
      #scheme: basic
      in: header
      name: api-key
      description: >
        The API key must be provided in the request header for all endpoint calls.<br>
        See the
    userid:
      type: apiKey
      in: header
      name: user-uid
      description: >
        This User unique identifier key must be provided in the request header for all PUT,
        POST, and DELETE endpoint calls.

#-------------------------------------------------------------------------------
# S E C U R I T Y
#-------------------------------------------------------------------------------
security:
  - apikey: []
  - userid: []
...
